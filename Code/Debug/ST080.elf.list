
ST080.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000318c  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08003314  08003314  0000b314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08003318  08003318  0000b318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000001c  20000000  0800331c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000029d4  20000020  08003338  00010020  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  200029f4  08003338  000129f4  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0001001c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00006fc8  00000000  00000000  0001004a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001731  00000000  00000000  00017012  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000978  00000000  00000000  00018748  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000870  00000000  00000000  000190c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003b6e  00000000  00000000  00019930  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000327c  00000000  00000000  0001d49e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0002071a  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001db4  00000000  00000000  0002079c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032fc 	.word	0x080032fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080032fc 	.word	0x080032fc
 80001c4:	20000024 	.word	0x20000024

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <SystemInit+0x4c>)
 80001ce:	4a11      	ldr	r2, [pc, #68]	; (8000214 <SystemInit+0x4c>)
 80001d0:	6812      	ldr	r2, [r2, #0]
 80001d2:	f042 0201 	orr.w	r2, r2, #1
 80001d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <SystemInit+0x4c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001de:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <SystemInit+0x4c>)
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <SystemInit+0x4c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <SystemInit+0x4c>)
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <SystemInit+0x50>)
 80001f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <SystemInit+0x4c>)
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <SystemInit+0x4c>)
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <SystemInit+0x4c>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000206:	f000 f80b 	bl	8000220 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <SystemInit+0x54>)
 800020c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000210:	609a      	str	r2, [r3, #8]
#endif
}
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40023800 	.word	0x40023800
 8000218:	24003010 	.word	0x24003010
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	2300      	movs	r3, #0
 800022c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800022e:	4b35      	ldr	r3, [pc, #212]	; (8000304 <SetSysClock+0xe4>)
 8000230:	4a34      	ldr	r2, [pc, #208]	; (8000304 <SetSysClock+0xe4>)
 8000232:	6812      	ldr	r2, [r2, #0]
 8000234:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000238:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800023a:	4b32      	ldr	r3, [pc, #200]	; (8000304 <SetSysClock+0xe4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000242:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d103      	bne.n	8000258 <SetSysClock+0x38>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000256:	d1f0      	bne.n	800023a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000258:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <SetSysClock+0xe4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000264:	2301      	movs	r3, #1
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	e001      	b.n	800026e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800026a:	2300      	movs	r3, #0
 800026c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d142      	bne.n	80002fa <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <SetSysClock+0xe4>)
 8000276:	4a23      	ldr	r2, [pc, #140]	; (8000304 <SetSysClock+0xe4>)
 8000278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800027a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800027e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000280:	4b21      	ldr	r3, [pc, #132]	; (8000308 <SetSysClock+0xe8>)
 8000282:	4a21      	ldr	r2, [pc, #132]	; (8000308 <SetSysClock+0xe8>)
 8000284:	6812      	ldr	r2, [r2, #0]
 8000286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800028a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800028c:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <SetSysClock+0xe4>)
 800028e:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <SetSysClock+0xe4>)
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <SetSysClock+0xe4>)
 8000296:	4a1b      	ldr	r2, [pc, #108]	; (8000304 <SetSysClock+0xe4>)
 8000298:	6892      	ldr	r2, [r2, #8]
 800029a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800029e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <SetSysClock+0xe4>)
 80002a2:	4a18      	ldr	r2, [pc, #96]	; (8000304 <SetSysClock+0xe4>)
 80002a4:	6892      	ldr	r2, [r2, #8]
 80002a6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80002aa:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <SetSysClock+0xe4>)
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <SetSysClock+0xec>)
 80002b0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <SetSysClock+0xe4>)
 80002b4:	4a13      	ldr	r2, [pc, #76]	; (8000304 <SetSysClock+0xe4>)
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002bc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002be:	bf00      	nop
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <SetSysClock+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0f9      	beq.n	80002c0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <SetSysClock+0xf0>)
 80002ce:	f240 6205 	movw	r2, #1541	; 0x605
 80002d2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <SetSysClock+0xe4>)
 80002d6:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <SetSysClock+0xe4>)
 80002d8:	6892      	ldr	r2, [r2, #8]
 80002da:	f022 0203 	bic.w	r2, r2, #3
 80002de:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <SetSysClock+0xe4>)
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <SetSysClock+0xe4>)
 80002e4:	6892      	ldr	r2, [r2, #8]
 80002e6:	f042 0202 	orr.w	r2, r2, #2
 80002ea:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002ec:	bf00      	nop
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <SetSysClock+0xe4>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	f003 030c 	and.w	r3, r3, #12
 80002f6:	2b08      	cmp	r3, #8
 80002f8:	d1f9      	bne.n	80002ee <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40007000 	.word	0x40007000
 800030c:	0740690a 	.word	0x0740690a
 8000310:	40023c00 	.word	0x40023c00

08000314 <USART2_IRQHandler>:
/******************************************************************************/
// ----------------------------------------------------------------------------

uint16_t uart2_cnt = 0;

void USART2_IRQHandler( void ) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	++uart2_cnt;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <USART2_IRQHandler+0x1c>)
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	b29a      	uxth	r2, r3
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <USART2_IRQHandler+0x1c>)
 8000322:	801a      	strh	r2, [r3, #0]
	USART_ClearFlag( USART2, USART_FLAG_TC );
 8000324:	4803      	ldr	r0, [pc, #12]	; (8000334 <USART2_IRQHandler+0x20>)
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	f002 fdb4 	bl	8002e94 <USART_ClearFlag>
}
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	2000003c 	.word	0x2000003c
 8000334:	40004400 	.word	0x40004400

08000338 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
}
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000348:	e7fe      	b.n	8000348 <HardFault_Handler+0x4>
 800034a:	bf00      	nop

0800034c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler+0x4>
 8000352:	bf00      	nop

08000354 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000358:	e7fe      	b.n	8000358 <BusFault_Handler+0x4>
 800035a:	bf00      	nop

0800035c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000360:	e7fe      	b.n	8000360 <UsageFault_Handler+0x4>
 8000362:	bf00      	nop

08000364 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
}
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000370:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000372:	f000 b804 	b.w	800037e <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <LoopFillZerobss+0x22>)
  ldr  r3, [r3, r1]
 8000378:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800037a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800037c:	3104      	adds	r1, #4

0800037e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800037e:	480f      	ldr	r0, [pc, #60]	; (80003bc <LoopFillZerobss+0x26>)
  ldr  r3, =_edata
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <LoopFillZerobss+0x2a>)
  adds  r2, r0, r1
 8000382:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000384:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000386:	f4ff aff6 	bcc.w	8000376 <CopyDataInit>
  ldr  r2, =_sbss
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <LoopFillZerobss+0x2e>)
  b  LoopFillZerobss
 800038c:	f000 b803 	b.w	8000396 <LoopFillZerobss>

08000390 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000390:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000392:	f842 3b04 	str.w	r3, [r2], #4

08000396 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <LoopFillZerobss+0x32>)
  cmp  r2, r3
 8000398:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800039a:	f4ff aff9 	bcc.w	8000390 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 800039e:	480b      	ldr	r0, [pc, #44]	; (80003cc <LoopFillZerobss+0x36>)
 ldr     r1,[r0]
 80003a0:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 80003a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 80003a6:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003a8:	f7ff ff0e 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ac:	f002 ff28 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003b0:	f000 fc6e 	bl	8000c90 <main>
  bx  lr    
 80003b4:	4770      	bx	lr
 80003b6:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	0800331c 	.word	0x0800331c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003c0:	2000001c 	.word	0x2000001c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003c4:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003c8:	200029f4 	.word	0x200029f4
  cmp  r2, r3
  bcc  FillZerobss
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 80003cc:	e000ed88 	.word	0xe000ed88

080003d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d0:	f7ff bffe 	b.w	80003d0 <ADC_IRQHandler>

080003d4 <vApplicationTickHook>:
uint64_t u64IdleTicksCnt = 0; // Counts when the OS has no task to execute.
uint16_t u16PWM1 = 0;

// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
// ----------------------------------------------------------------------------
void vApplicationTickHook(void) {
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	++tickTime;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <vApplicationTickHook+0x20>)
 80003da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003de:	3201      	adds	r2, #1
 80003e0:	f143 0300 	adc.w	r3, r3, #0
 80003e4:	4903      	ldr	r1, [pc, #12]	; (80003f4 <vApplicationTickHook+0x20>)
 80003e6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	20000040 	.word	0x20000040

080003f8 <vApplicationIdleHook>:

// This FreeRTOS call-back function gets when no other task is ready to execute.
// On a completely unloaded system this is getting called at over 2.5MHz!
// ----------------------------------------------------------------------------
void vApplicationIdleHook(void) {
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	++u64IdleTicksCnt;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <vApplicationIdleHook+0x20>)
 80003fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000402:	3201      	adds	r2, #1
 8000404:	f143 0300 	adc.w	r3, r3, #0
 8000408:	4903      	ldr	r1, [pc, #12]	; (8000418 <vApplicationIdleHook+0x20>)
 800040a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000048 	.word	0x20000048

0800041c <vApplicationMallocFailedHook>:

// A required FreeRTOS function.
// ----------------------------------------------------------------------------
void vApplicationMallocFailedHook(void) {
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	configASSERT(0);  // Latch on any failure / error.
 8000420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000424:	f380 8811 	msr	BASEPRI, r0
 8000428:	e7fe      	b.n	8000428 <vApplicationMallocFailedHook+0xc>
 800042a:	bf00      	nop

0800042c <vComposerTask>:
void vComposerTask(void *pvparameters);	// task to perform the main computations for the rhythm composer
void vCheckCurrentSample(void *pvparameters);// task to cycle through the 9-GPIO pins to check which instrument is supposed to be on the channel rack

// ++++++++ function implementations +++++++

void vComposerTask(void * pvparameters) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af04      	add	r7, sp, #16
 8000432:	6078      	str	r0, [r7, #4]
	// initialise the variables
	initVariables();
 8000434:	f000 f936 	bl	80006a4 <initVariables>
	configInterrupts();
 8000438:	f000 f992 	bl	8000760 <configInterrupts>
	configInstrPins();
 800043c:	f000 f970 	bl	8000720 <configInstrPins>

	debugLED_init(); // for debugging.
 8000440:	f000 f854 	bl	80004ec <debugLED_init>

	// start the task to read the instrument select pins
	xTaskCreate(vCheckCurrentSample, (signed char *) "Check Instr Select Pins", CHECKINSTR_STACK_SIZE, NULL, CHECKINSTR_PRIORITY, NULL);
 8000444:	2304      	movs	r3, #4
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	2300      	movs	r3, #0
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	2300      	movs	r3, #0
 800044e:	9302      	str	r3, [sp, #8]
 8000450:	2300      	movs	r3, #0
 8000452:	9303      	str	r3, [sp, #12]
 8000454:	481f      	ldr	r0, [pc, #124]	; (80004d4 <vComposerTask+0xa8>)
 8000456:	4920      	ldr	r1, [pc, #128]	; (80004d8 <vComposerTask+0xac>)
 8000458:	2280      	movs	r2, #128	; 0x80
 800045a:	2300      	movs	r3, #0
 800045c:	f001 f9ca 	bl	80017f4 <xTaskGenericCreate>

	// start algorithm for the channel rack
	uint8_t previous_sample = sample;
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <vComposerTask+0xb0>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	73fb      	strb	r3, [r7, #15]
	while (true) {

		// toggle LED3 to check if this loop is running properly
		if ((tickTime - debugLED_counter_3)>500){
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <vComposerTask+0xb4>)
 8000468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <vComposerTask+0xb8>)
 800046e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000472:	1a82      	subs	r2, r0, r2
 8000474:	eb61 0303 	sbc.w	r3, r1, r3
 8000478:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	4299      	cmp	r1, r3
 8000482:	bf08      	it	eq
 8000484:	4290      	cmpeq	r0, r2
 8000486:	d208      	bcs.n	800049a <vComposerTask+0x6e>
			// toggle LED5 (red)
			STM_EVAL_LEDToggle(LED3);
 8000488:	2001      	movs	r0, #1
 800048a:	f002 fe3d 	bl	8003108 <STM_EVAL_LEDToggle>
			debugLED_counter_3 = tickTime;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <vComposerTask+0xb4>)
 8000490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000494:	4913      	ldr	r1, [pc, #76]	; (80004e4 <vComposerTask+0xb8>)
 8000496:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if (status || sample != previous_sample) {
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <vComposerTask+0xbc>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d104      	bne.n	80004ac <vComposerTask+0x80>
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <vComposerTask+0xb0>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	7bfa      	ldrb	r2, [r7, #15]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d00b      	beq.n	80004c4 <vComposerTask+0x98>
			int i;
			for (i = 0; i < 16; ++i) {
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	e005      	b.n	80004be <vComposerTask+0x92>
				addSamples(i);
 80004b2:	68b8      	ldr	r0, [r7, #8]
 80004b4:	f000 fa20 	bl	80008f8 <addSamples>
			debugLED_counter_3 = tickTime;
		}

		if (status || sample != previous_sample) {
			int i;
			for (i = 0; i < 16; ++i) {
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	3301      	adds	r3, #1
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	2b0f      	cmp	r3, #15
 80004c2:	ddf6      	ble.n	80004b2 <vComposerTask+0x86>
				addSamples(i);
			}
		}
		previous_sample = sample;
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <vComposerTask+0xb0>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(10);
 80004ca:	200a      	movs	r0, #10
 80004cc:	f001 fa58 	bl	8001980 <vTaskDelay>
	}
 80004d0:	e7c9      	b.n	8000466 <vComposerTask+0x3a>
 80004d2:	bf00      	nop
 80004d4:	08000549 	.word	0x08000549
 80004d8:	08003294 	.word	0x08003294
 80004dc:	200029f0 	.word	0x200029f0
 80004e0:	20000040 	.word	0x20000040
 80004e4:	200015b8 	.word	0x200015b8
 80004e8:	200029f1 	.word	0x200029f1

080004ec <debugLED_init>:
//	{
//
//	}
}

void debugLED_init(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* Initialize LEDs */
	STM_EVAL_LEDInit(LED3);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f002 fdc3 	bl	800307c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f002 fdc0 	bl	800307c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 80004fc:	2002      	movs	r0, #2
 80004fe:	f002 fdbd 	bl	800307c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8000502:	2003      	movs	r0, #3
 8000504:	f002 fdba 	bl	800307c <STM_EVAL_LEDInit>

	/* Turn off all LEDs */
	STM_EVAL_LEDOff(LED3);
 8000508:	2001      	movs	r0, #1
 800050a:	f002 fde5 	bl	80030d8 <STM_EVAL_LEDOff>
	STM_EVAL_LEDOff(LED4);
 800050e:	2000      	movs	r0, #0
 8000510:	f002 fde2 	bl	80030d8 <STM_EVAL_LEDOff>
	STM_EVAL_LEDOff(LED5);
 8000514:	2002      	movs	r0, #2
 8000516:	f002 fddf 	bl	80030d8 <STM_EVAL_LEDOff>
	STM_EVAL_LEDOff(LED6);
 800051a:	2003      	movs	r0, #3
 800051c:	f002 fddc 	bl	80030d8 <STM_EVAL_LEDOff>

	debugLED_counter_5 = tickTime;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <debugLED_init+0x50>)
 8000522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000526:	4906      	ldr	r1, [pc, #24]	; (8000540 <debugLED_init+0x54>)
 8000528:	e9c1 2300 	strd	r2, r3, [r1]
	debugLED_counter_3 = tickTime;
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <debugLED_init+0x50>)
 800052e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000532:	4904      	ldr	r1, [pc, #16]	; (8000544 <debugLED_init+0x58>)
 8000534:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000040 	.word	0x20000040
 8000540:	200015a8 	.word	0x200015a8
 8000544:	200015b8 	.word	0x200015b8

08000548 <vCheckCurrentSample>:

/**
 * task to cycle through the 9-GPIO pins to check which instrument is supposed to be on the channel rack
 * GPIO pins in use: PB0-8
 */
void vCheckCurrentSample(void *pvparameters) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]

	while (true) {
		// debugging code for LEDs flashing
		if ((tickTime - debugLED_counter_5) > 500) {
 8000550:	4b50      	ldr	r3, [pc, #320]	; (8000694 <vCheckCurrentSample+0x14c>)
 8000552:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000556:	4b50      	ldr	r3, [pc, #320]	; (8000698 <vCheckCurrentSample+0x150>)
 8000558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800055c:	1a82      	subs	r2, r0, r2
 800055e:	eb61 0303 	sbc.w	r3, r1, r3
 8000562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000566:	f04f 0100 	mov.w	r1, #0
 800056a:	4299      	cmp	r1, r3
 800056c:	bf08      	it	eq
 800056e:	4290      	cmpeq	r0, r2
 8000570:	d208      	bcs.n	8000584 <vCheckCurrentSample+0x3c>
			// toggle LED5 (red)
			STM_EVAL_LEDToggle(LED5);
 8000572:	2002      	movs	r0, #2
 8000574:	f002 fdc8 	bl	8003108 <STM_EVAL_LEDToggle>
			debugLED_counter_5 = tickTime;
 8000578:	4b46      	ldr	r3, [pc, #280]	; (8000694 <vCheckCurrentSample+0x14c>)
 800057a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800057e:	4946      	ldr	r1, [pc, #280]	; (8000698 <vCheckCurrentSample+0x150>)
 8000580:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_0)) {
 8000584:	4845      	ldr	r0, [pc, #276]	; (800069c <vCheckCurrentSample+0x154>)
 8000586:	2101      	movs	r1, #1
 8000588:	f002 fd5e 	bl	8003048 <GPIO_ReadInputDataBit>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d00b      	beq.n	80005aa <vCheckCurrentSample+0x62>
			while (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_0))
 8000592:	bf00      	nop
 8000594:	4841      	ldr	r0, [pc, #260]	; (800069c <vCheckCurrentSample+0x154>)
 8000596:	2101      	movs	r1, #1
 8000598:	f002 fd56 	bl	8003048 <GPIO_ReadInputDataBit>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f8      	bne.n	8000594 <vCheckCurrentSample+0x4c>
				;
			// PB0
			sample = 0;
 80005a2:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <vCheckCurrentSample+0x158>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
 80005a8:	e070      	b.n	800068c <vCheckCurrentSample+0x144>
		} else if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1)) {
 80005aa:	483c      	ldr	r0, [pc, #240]	; (800069c <vCheckCurrentSample+0x154>)
 80005ac:	2102      	movs	r1, #2
 80005ae:	f002 fd4b 	bl	8003048 <GPIO_ReadInputDataBit>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00b      	beq.n	80005d0 <vCheckCurrentSample+0x88>
			while (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1))
 80005b8:	bf00      	nop
 80005ba:	4838      	ldr	r0, [pc, #224]	; (800069c <vCheckCurrentSample+0x154>)
 80005bc:	2102      	movs	r1, #2
 80005be:	f002 fd43 	bl	8003048 <GPIO_ReadInputDataBit>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f8      	bne.n	80005ba <vCheckCurrentSample+0x72>
				;
			// PB1
			sample = 1;
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <vCheckCurrentSample+0x158>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e05d      	b.n	800068c <vCheckCurrentSample+0x144>
		} else if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_2)) {
 80005d0:	4832      	ldr	r0, [pc, #200]	; (800069c <vCheckCurrentSample+0x154>)
 80005d2:	2104      	movs	r1, #4
 80005d4:	f002 fd38 	bl	8003048 <GPIO_ReadInputDataBit>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d00b      	beq.n	80005f6 <vCheckCurrentSample+0xae>
			while (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_2))
 80005de:	bf00      	nop
 80005e0:	482e      	ldr	r0, [pc, #184]	; (800069c <vCheckCurrentSample+0x154>)
 80005e2:	2104      	movs	r1, #4
 80005e4:	f002 fd30 	bl	8003048 <GPIO_ReadInputDataBit>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f8      	bne.n	80005e0 <vCheckCurrentSample+0x98>
				;
			// PB2
			sample = 2;
 80005ee:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <vCheckCurrentSample+0x158>)
 80005f0:	2202      	movs	r2, #2
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e04a      	b.n	800068c <vCheckCurrentSample+0x144>
		} else if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_3)) {
 80005f6:	4829      	ldr	r0, [pc, #164]	; (800069c <vCheckCurrentSample+0x154>)
 80005f8:	2108      	movs	r1, #8
 80005fa:	f002 fd25 	bl	8003048 <GPIO_ReadInputDataBit>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <vCheckCurrentSample+0xd4>
			while (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_3))
 8000604:	bf00      	nop
 8000606:	4825      	ldr	r0, [pc, #148]	; (800069c <vCheckCurrentSample+0x154>)
 8000608:	2108      	movs	r1, #8
 800060a:	f002 fd1d 	bl	8003048 <GPIO_ReadInputDataBit>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f8      	bne.n	8000606 <vCheckCurrentSample+0xbe>
				;
			// PB3
			sample = 3;
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <vCheckCurrentSample+0x158>)
 8000616:	2203      	movs	r2, #3
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	e037      	b.n	800068c <vCheckCurrentSample+0x144>
		} else if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_4)) {
 800061c:	481f      	ldr	r0, [pc, #124]	; (800069c <vCheckCurrentSample+0x154>)
 800061e:	2110      	movs	r1, #16
 8000620:	f002 fd12 	bl	8003048 <GPIO_ReadInputDataBit>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00b      	beq.n	8000642 <vCheckCurrentSample+0xfa>
			while (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_4))
 800062a:	bf00      	nop
 800062c:	481b      	ldr	r0, [pc, #108]	; (800069c <vCheckCurrentSample+0x154>)
 800062e:	2110      	movs	r1, #16
 8000630:	f002 fd0a 	bl	8003048 <GPIO_ReadInputDataBit>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f8      	bne.n	800062c <vCheckCurrentSample+0xe4>
				;
			// PB4
			sample = 4;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <vCheckCurrentSample+0x158>)
 800063c:	2204      	movs	r2, #4
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e024      	b.n	800068c <vCheckCurrentSample+0x144>
		} else if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_5)) {
 8000642:	4816      	ldr	r0, [pc, #88]	; (800069c <vCheckCurrentSample+0x154>)
 8000644:	2120      	movs	r1, #32
 8000646:	f002 fcff 	bl	8003048 <GPIO_ReadInputDataBit>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00b      	beq.n	8000668 <vCheckCurrentSample+0x120>
			while (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_5))
 8000650:	bf00      	nop
 8000652:	4812      	ldr	r0, [pc, #72]	; (800069c <vCheckCurrentSample+0x154>)
 8000654:	2120      	movs	r1, #32
 8000656:	f002 fcf7 	bl	8003048 <GPIO_ReadInputDataBit>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f8      	bne.n	8000652 <vCheckCurrentSample+0x10a>
				;
			// PB5
			sample = 5;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <vCheckCurrentSample+0x158>)
 8000662:	2205      	movs	r2, #5
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e011      	b.n	800068c <vCheckCurrentSample+0x144>
//	} else if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6)){
//		while(GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6));
//		// PB6
//		sample = 6;
		} else if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_7)) {
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <vCheckCurrentSample+0x154>)
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	f002 fcec 	bl	8003048 <GPIO_ReadInputDataBit>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d00a      	beq.n	800068c <vCheckCurrentSample+0x144>
			while (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_7))
 8000676:	bf00      	nop
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <vCheckCurrentSample+0x154>)
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	f002 fce4 	bl	8003048 <GPIO_ReadInputDataBit>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f8      	bne.n	8000678 <vCheckCurrentSample+0x130>
				;
			// PB7
			sample = 7;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <vCheckCurrentSample+0x158>)
 8000688:	2207      	movs	r2, #7
 800068a:	701a      	strb	r2, [r3, #0]
		}

		// insert a delay
		vTaskDelay(10);
 800068c:	200a      	movs	r0, #10
 800068e:	f001 f977 	bl	8001980 <vTaskDelay>
	}
 8000692:	e75d      	b.n	8000550 <vCheckCurrentSample+0x8>
 8000694:	20000040 	.word	0x20000040
 8000698:	200015a8 	.word	0x200015a8
 800069c:	40020400 	.word	0x40020400
 80006a0:	200029f0 	.word	0x200029f0

080006a4 <initVariables>:

/**
 * Function to initialise the variables
 */
static void initVariables()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	loadDrumKit(); // TODO load samples from drumkit
 80006a8:	f000 f91e 	bl	80008e8 <loadDrumKit>
	initialiseRack();
 80006ac:	f000 f814 	bl	80006d8 <initialiseRack>
	status = true;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <initVariables+0x28>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
	sample = 0;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <initVariables+0x2c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
	previous = 0;
 80006bc:	4905      	ldr	r1, [pc, #20]	; (80006d4 <initVariables+0x30>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200029f1 	.word	0x200029f1
 80006d0:	200029f0 	.word	0x200029f0
 80006d4:	200015c8 	.word	0x200015c8

080006d8 <initialiseRack>:

/**
 * Function to initialise the whole channel
 */
void initialiseRack(){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
	int i, j;
	for (i = 0; i < NUM_INSTR; ++i){
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	e013      	b.n	800070c <initialiseRack+0x34>
		for (j = 0; j < SAMPLE_SIZE; ++j){
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	e00a      	b.n	8000700 <initialiseRack+0x28>
			rackPins[i][j] = false;
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <initialiseRack+0x44>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	0119      	lsls	r1, r3, #4
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	440b      	add	r3, r1
 80006f4:	4413      	add	r3, r2
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 * Function to initialise the whole channel
 */
void initialiseRack(){
	int i, j;
	for (i = 0; i < NUM_INSTR; ++i){
		for (j = 0; j < SAMPLE_SIZE; ++j){
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b63      	cmp	r3, #99	; 0x63
 8000704:	ddf1      	ble.n	80006ea <initialiseRack+0x12>
/**
 * Function to initialise the whole channel
 */
void initialiseRack(){
	int i, j;
	for (i = 0; i < NUM_INSTR; ++i){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3301      	adds	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b08      	cmp	r3, #8
 8000710:	dde8      	ble.n	80006e4 <initialiseRack+0xc>
		for (j = 0; j < SAMPLE_SIZE; ++j){
			rackPins[i][j] = false;
		}
	}
}
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	200015d0 	.word	0x200015d0

08000720 <configInstrPins>:

/**
 * Function to configure the GPIOs for the instrument pins
 */
void configInstrPins(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	// Pins used for the freestyle pad are PB0-PB8

	/* Enable the clock for port B*/
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000726:	2002      	movs	r0, #2
 8000728:	2101      	movs	r1, #1
 800072a:	f002 fbc3 	bl	8002eb4 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800072e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000732:	2101      	movs	r1, #1
 8000734:	f002 fbdc 	bl	8002ef0 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure Button pin as input */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;		// Input mode
 8000738:	2300      	movs	r3, #0
 800073a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		// Push - Pull
 800073c:	2300      	movs	r3, #0
 800073e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;	// To detect a logic high
 8000740:	2302      	movs	r3, #2
 8000742:	71fb      	strb	r3, [r7, #7]

	// Pins 0-8 on port B (9 in total)
	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_0
 8000744:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000748:	603b      	str	r3, [r7, #0]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6
			| GPIO_PIN_7	| GPIO_PIN_8;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800074a:	463b      	mov	r3, r7
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <configInstrPins+0x3c>)
 800074e:	4619      	mov	r1, r3
 8000750:	f002 fbec 	bl	8002f2c <GPIO_Init>
}
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40020400 	.word	0x40020400

08000760 <configInterrupts>:
/**
 * config pins being used for channel rack
 * PA0 PA1 PA2 PA3 PA4 PA5 PA6 PA7 ... PE8 PE9 PE10 PE11 PE12 PE13 PE14 PE15
 */
void configInterrupts(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	// pins being used for channel rack
	// PA0 PA1 PA2 PA3 PA4 PA5 PA6 PA7 ... PE8 PE9 PE10 PE11 PE12 PE13 PE14 PE15
	bool fail = false;
 8000766:	2300      	movs	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
	if (TM_EXTI_Attach(GPIOA, GPIO_Pin_0, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 800076a:	485d      	ldr	r0, [pc, #372]	; (80008e0 <configInterrupts+0x180>)
 800076c:	2101      	movs	r1, #1
 800076e:	2200      	movs	r2, #0
 8000770:	f000 fb80 	bl	8000e74 <TM_EXTI_Attach>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <configInterrupts+0x20>
		// PA0
		fail = true;
 800077a:	2301      	movs	r3, #1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	e0ab      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOA, GPIO_Pin_1, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 8000780:	4857      	ldr	r0, [pc, #348]	; (80008e0 <configInterrupts+0x180>)
 8000782:	2102      	movs	r1, #2
 8000784:	2200      	movs	r2, #0
 8000786:	f000 fb75 	bl	8000e74 <TM_EXTI_Attach>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <configInterrupts+0x36>
		// PA1
		fail = true;
 8000790:	2301      	movs	r3, #1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	e0a0      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOA, GPIO_Pin_2, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 8000796:	4852      	ldr	r0, [pc, #328]	; (80008e0 <configInterrupts+0x180>)
 8000798:	2104      	movs	r1, #4
 800079a:	2200      	movs	r2, #0
 800079c:	f000 fb6a 	bl	8000e74 <TM_EXTI_Attach>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <configInterrupts+0x4c>
		// PA2
		fail = true;
 80007a6:	2301      	movs	r3, #1
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	e095      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOA, GPIO_Pin_3, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 80007ac:	484c      	ldr	r0, [pc, #304]	; (80008e0 <configInterrupts+0x180>)
 80007ae:	2108      	movs	r1, #8
 80007b0:	2200      	movs	r2, #0
 80007b2:	f000 fb5f 	bl	8000e74 <TM_EXTI_Attach>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <configInterrupts+0x62>
		// PA3
		fail = true;
 80007bc:	2301      	movs	r3, #1
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	e08a      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOA, GPIO_Pin_4, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 80007c2:	4847      	ldr	r0, [pc, #284]	; (80008e0 <configInterrupts+0x180>)
 80007c4:	2110      	movs	r1, #16
 80007c6:	2200      	movs	r2, #0
 80007c8:	f000 fb54 	bl	8000e74 <TM_EXTI_Attach>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <configInterrupts+0x78>
		// PA4
		fail = true;
 80007d2:	2301      	movs	r3, #1
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	e07f      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOA, GPIO_Pin_5, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 80007d8:	4841      	ldr	r0, [pc, #260]	; (80008e0 <configInterrupts+0x180>)
 80007da:	2120      	movs	r1, #32
 80007dc:	2200      	movs	r2, #0
 80007de:	f000 fb49 	bl	8000e74 <TM_EXTI_Attach>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <configInterrupts+0x8e>
		// PA5
		fail = true;
 80007e8:	2301      	movs	r3, #1
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	e074      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOA, GPIO_Pin_6, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 80007ee:	483c      	ldr	r0, [pc, #240]	; (80008e0 <configInterrupts+0x180>)
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	2200      	movs	r2, #0
 80007f4:	f000 fb3e 	bl	8000e74 <TM_EXTI_Attach>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <configInterrupts+0xa4>
		// PA6
		fail = true;
 80007fe:	2301      	movs	r3, #1
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	e069      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOA, GPIO_Pin_7, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 8000804:	4836      	ldr	r0, [pc, #216]	; (80008e0 <configInterrupts+0x180>)
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	2200      	movs	r2, #0
 800080a:	f000 fb33 	bl	8000e74 <TM_EXTI_Attach>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <configInterrupts+0xba>
		// PA7
		fail = true;
 8000814:	2301      	movs	r3, #1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	e05e      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_8, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 800081a:	4832      	ldr	r0, [pc, #200]	; (80008e4 <configInterrupts+0x184>)
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	2200      	movs	r2, #0
 8000822:	f000 fb27 	bl	8000e74 <TM_EXTI_Attach>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <configInterrupts+0xd2>
		// PE8
		fail = true;
 800082c:	2301      	movs	r3, #1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	e052      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_9, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 8000832:	482c      	ldr	r0, [pc, #176]	; (80008e4 <configInterrupts+0x184>)
 8000834:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000838:	2200      	movs	r2, #0
 800083a:	f000 fb1b 	bl	8000e74 <TM_EXTI_Attach>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <configInterrupts+0xea>
		// PE9
		fail = true;
 8000844:	2301      	movs	r3, #1
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	e046      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_10, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 800084a:	4826      	ldr	r0, [pc, #152]	; (80008e4 <configInterrupts+0x184>)
 800084c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000850:	2200      	movs	r2, #0
 8000852:	f000 fb0f 	bl	8000e74 <TM_EXTI_Attach>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <configInterrupts+0x102>
		// PE10
		fail = true;
 800085c:	2301      	movs	r3, #1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	e03a      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_11, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 8000862:	4820      	ldr	r0, [pc, #128]	; (80008e4 <configInterrupts+0x184>)
 8000864:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000868:	2200      	movs	r2, #0
 800086a:	f000 fb03 	bl	8000e74 <TM_EXTI_Attach>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <configInterrupts+0x11a>
		// PE11
		fail = true;
 8000874:	2301      	movs	r3, #1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	e02e      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_12, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 800087a:	481a      	ldr	r0, [pc, #104]	; (80008e4 <configInterrupts+0x184>)
 800087c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000880:	2200      	movs	r2, #0
 8000882:	f000 faf7 	bl	8000e74 <TM_EXTI_Attach>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <configInterrupts+0x132>
		// PE12
		fail = true;
 800088c:	2301      	movs	r3, #1
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	e022      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_13, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <configInterrupts+0x184>)
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	2200      	movs	r2, #0
 800089a:	f000 faeb 	bl	8000e74 <TM_EXTI_Attach>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <configInterrupts+0x14a>
		// PE13
		fail = true;
 80008a4:	2301      	movs	r3, #1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	e016      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_14, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <configInterrupts+0x184>)
 80008ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b0:	2200      	movs	r2, #0
 80008b2:	f000 fadf 	bl	8000e74 <TM_EXTI_Attach>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <configInterrupts+0x162>
		// PE14
		fail = true;
 80008bc:	2301      	movs	r3, #1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	e00a      	b.n	80008d8 <configInterrupts+0x178>
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_15, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <configInterrupts+0x184>)
 80008c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c8:	2200      	movs	r2, #0
 80008ca:	f000 fad3 	bl	8000e74 <TM_EXTI_Attach>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <configInterrupts+0x178>
		// PE15
		fail = true;
 80008d4:	2301      	movs	r3, #1
 80008d6:	71fb      	strb	r3, [r7, #7]
	}

	if (fail){
		// TODO failed configuring interrupts. (FLASH LEDs or something)
	}
}
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40021000 	.word	0x40021000

080008e8 <loadDrumKit>:

uint16_t** loadDrumKit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	//TODO
	return 0;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <addSamples>:
 * check status of pin "i" in each of those arrays
 * if pin "i" is set, add the audio for that sample to the DAC_Buffer
 * if pin "i" is low, do not add anything to the DAC_Buffer
 * Do this for each of the 8 samples
 */
void addSamples(int i) {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

	return;
 8000900:	bf00      	nop
}
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <TM_EXTI_Handler>:
}

/**
 * IRQ for the channel rack buttons.
 */
void TM_EXTI_Handler(uint16_t GPIO_Pin) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
	// +++ debouncing logic (30 milliseconds) +++
	current = tickTime;
 8000916:	4b9e      	ldr	r3, [pc, #632]	; (8000b90 <TM_EXTI_Handler+0x284>)
 8000918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800091c:	499d      	ldr	r1, [pc, #628]	; (8000b94 <TM_EXTI_Handler+0x288>)
 800091e:	e9c1 2300 	strd	r2, r3, [r1]
	if ((previous - current) < 30){
 8000922:	4b9d      	ldr	r3, [pc, #628]	; (8000b98 <TM_EXTI_Handler+0x28c>)
 8000924:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000928:	4b9a      	ldr	r3, [pc, #616]	; (8000b94 <TM_EXTI_Handler+0x288>)
 800092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800092e:	1a82      	subs	r2, r0, r2
 8000930:	eb61 0303 	sbc.w	r3, r1, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf08      	it	eq
 8000938:	2a1e      	cmpeq	r2, #30
 800093a:	d206      	bcs.n	800094a <TM_EXTI_Handler+0x3e>
		previous = current;
 800093c:	4b95      	ldr	r3, [pc, #596]	; (8000b94 <TM_EXTI_Handler+0x288>)
 800093e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000942:	4995      	ldr	r1, [pc, #596]	; (8000b98 <TM_EXTI_Handler+0x28c>)
 8000944:	e9c1 2300 	strd	r2, r3, [r1]
		return;
 8000948:	e195      	b.n	8000c76 <TM_EXTI_Handler+0x36a>
	}

	/* Handle external line 0 interrupts */
	if (GPIO_Pin == GPIO_Pin_0) {
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d112      	bne.n	8000976 <TM_EXTI_Handler+0x6a>
		/* Toggle rack pin button */
		rackPins[sample][0] = rackPins[sample][0] == true ? false : true;
 8000950:	4b92      	ldr	r3, [pc, #584]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b91      	ldr	r3, [pc, #580]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4991      	ldr	r1, [pc, #580]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 800095c:	011b      	lsls	r3, r3, #4
 800095e:	440b      	add	r3, r1
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <TM_EXTI_Handler+0x5e>
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <TM_EXTI_Handler+0x60>
 800096a:	2301      	movs	r3, #1
 800096c:	498c      	ldr	r1, [pc, #560]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	440a      	add	r2, r1
 8000972:	7013      	strb	r3, [r2, #0]
 8000974:	e179      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_1) {
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d114      	bne.n	80009a6 <TM_EXTI_Handler+0x9a>
		/* Toggle rack pin button */
		rackPins[sample][1] = rackPins[sample][1] == true ? false : true;
 800097c:	4b87      	ldr	r3, [pc, #540]	; (8000b9c <TM_EXTI_Handler+0x290>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b86      	ldr	r3, [pc, #536]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4986      	ldr	r1, [pc, #536]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	440b      	add	r3, r1
 800098c:	3301      	adds	r3, #1
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <TM_EXTI_Handler+0x8c>
 8000994:	2300      	movs	r3, #0
 8000996:	e000      	b.n	800099a <TM_EXTI_Handler+0x8e>
 8000998:	2301      	movs	r3, #1
 800099a:	4981      	ldr	r1, [pc, #516]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	440a      	add	r2, r1
 80009a0:	3201      	adds	r2, #1
 80009a2:	7013      	strb	r3, [r2, #0]
 80009a4:	e161      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_2) {
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d114      	bne.n	80009d6 <TM_EXTI_Handler+0xca>
		/* Toggle rack pin button */
		rackPins[sample][2] = rackPins[sample][2] == true ? false : true;
 80009ac:	4b7b      	ldr	r3, [pc, #492]	; (8000b9c <TM_EXTI_Handler+0x290>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b7a      	ldr	r3, [pc, #488]	; (8000b9c <TM_EXTI_Handler+0x290>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	497a      	ldr	r1, [pc, #488]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 80009b8:	011b      	lsls	r3, r3, #4
 80009ba:	440b      	add	r3, r1
 80009bc:	3302      	adds	r3, #2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <TM_EXTI_Handler+0xbc>
 80009c4:	2300      	movs	r3, #0
 80009c6:	e000      	b.n	80009ca <TM_EXTI_Handler+0xbe>
 80009c8:	2301      	movs	r3, #1
 80009ca:	4975      	ldr	r1, [pc, #468]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	440a      	add	r2, r1
 80009d0:	3202      	adds	r2, #2
 80009d2:	7013      	strb	r3, [r2, #0]
 80009d4:	e149      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_3) {
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	2b08      	cmp	r3, #8
 80009da:	d114      	bne.n	8000a06 <TM_EXTI_Handler+0xfa>
		/* Toggle rack pin button */
		rackPins[sample][3] = rackPins[sample][3] == true ? false : true;
 80009dc:	4b6f      	ldr	r3, [pc, #444]	; (8000b9c <TM_EXTI_Handler+0x290>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b6e      	ldr	r3, [pc, #440]	; (8000b9c <TM_EXTI_Handler+0x290>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	496e      	ldr	r1, [pc, #440]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	440b      	add	r3, r1
 80009ec:	3303      	adds	r3, #3
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <TM_EXTI_Handler+0xec>
 80009f4:	2300      	movs	r3, #0
 80009f6:	e000      	b.n	80009fa <TM_EXTI_Handler+0xee>
 80009f8:	2301      	movs	r3, #1
 80009fa:	4969      	ldr	r1, [pc, #420]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	440a      	add	r2, r1
 8000a00:	3203      	adds	r2, #3
 8000a02:	7013      	strb	r3, [r2, #0]
 8000a04:	e131      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_4) {
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	2b10      	cmp	r3, #16
 8000a0a:	d114      	bne.n	8000a36 <TM_EXTI_Handler+0x12a>
		/* Toggle rack pin button */
		rackPins[sample][4] = rackPins[sample][4] == true ? false : true;
 8000a0c:	4b63      	ldr	r3, [pc, #396]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b62      	ldr	r3, [pc, #392]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4962      	ldr	r1, [pc, #392]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	440b      	add	r3, r1
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <TM_EXTI_Handler+0x11c>
 8000a24:	2300      	movs	r3, #0
 8000a26:	e000      	b.n	8000a2a <TM_EXTI_Handler+0x11e>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	495d      	ldr	r1, [pc, #372]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	440a      	add	r2, r1
 8000a30:	3204      	adds	r2, #4
 8000a32:	7013      	strb	r3, [r2, #0]
 8000a34:	e119      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_5) {
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	2b20      	cmp	r3, #32
 8000a3a:	d114      	bne.n	8000a66 <TM_EXTI_Handler+0x15a>
		/* Toggle rack pin button */
		rackPins[sample][5] = rackPins[sample][5] == true ? false : true;
 8000a3c:	4b57      	ldr	r3, [pc, #348]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b56      	ldr	r3, [pc, #344]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4956      	ldr	r1, [pc, #344]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3305      	adds	r3, #5
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <TM_EXTI_Handler+0x14c>
 8000a54:	2300      	movs	r3, #0
 8000a56:	e000      	b.n	8000a5a <TM_EXTI_Handler+0x14e>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	4951      	ldr	r1, [pc, #324]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	440a      	add	r2, r1
 8000a60:	3205      	adds	r2, #5
 8000a62:	7013      	strb	r3, [r2, #0]
 8000a64:	e101      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_6) {
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	2b40      	cmp	r3, #64	; 0x40
 8000a6a:	d114      	bne.n	8000a96 <TM_EXTI_Handler+0x18a>
		/* Toggle rack pin button */
		rackPins[sample][6] = rackPins[sample][6] == true ? false : true;
 8000a6c:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	494a      	ldr	r1, [pc, #296]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000a78:	011b      	lsls	r3, r3, #4
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3306      	adds	r3, #6
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <TM_EXTI_Handler+0x17c>
 8000a84:	2300      	movs	r3, #0
 8000a86:	e000      	b.n	8000a8a <TM_EXTI_Handler+0x17e>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	4945      	ldr	r1, [pc, #276]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	440a      	add	r2, r1
 8000a90:	3206      	adds	r2, #6
 8000a92:	7013      	strb	r3, [r2, #0]
 8000a94:	e0e9      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_7) {
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	2b80      	cmp	r3, #128	; 0x80
 8000a9a:	d114      	bne.n	8000ac6 <TM_EXTI_Handler+0x1ba>
		/* Toggle rack pin button */
		rackPins[sample][7] = rackPins[sample][7] == true ? false : true;
 8000a9c:	4b3f      	ldr	r3, [pc, #252]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	493e      	ldr	r1, [pc, #248]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000aa8:	011b      	lsls	r3, r3, #4
 8000aaa:	440b      	add	r3, r1
 8000aac:	3307      	adds	r3, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <TM_EXTI_Handler+0x1ac>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e000      	b.n	8000aba <TM_EXTI_Handler+0x1ae>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	4939      	ldr	r1, [pc, #228]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	440a      	add	r2, r1
 8000ac0:	3207      	adds	r2, #7
 8000ac2:	7013      	strb	r3, [r2, #0]
 8000ac4:	e0d1      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_8) {
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000acc:	d114      	bne.n	8000af8 <TM_EXTI_Handler+0x1ec>
		/* Toggle rack pin button */
		rackPins[sample][8] = rackPins[sample][8] == true ? false : true;
 8000ace:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4931      	ldr	r1, [pc, #196]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	440b      	add	r3, r1
 8000ade:	3308      	adds	r3, #8
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <TM_EXTI_Handler+0x1de>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <TM_EXTI_Handler+0x1e0>
 8000aea:	2301      	movs	r3, #1
 8000aec:	492c      	ldr	r1, [pc, #176]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	440a      	add	r2, r1
 8000af2:	3208      	adds	r2, #8
 8000af4:	7013      	strb	r3, [r2, #0]
 8000af6:	e0b8      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_9) {
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000afe:	d114      	bne.n	8000b2a <TM_EXTI_Handler+0x21e>
		/* Toggle rack pin button */
		rackPins[sample][9] = rackPins[sample][9] == true ? false : true;
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4925      	ldr	r1, [pc, #148]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	440b      	add	r3, r1
 8000b10:	3309      	adds	r3, #9
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <TM_EXTI_Handler+0x210>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e000      	b.n	8000b1e <TM_EXTI_Handler+0x212>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	4920      	ldr	r1, [pc, #128]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	440a      	add	r2, r1
 8000b24:	3209      	adds	r2, #9
 8000b26:	7013      	strb	r3, [r2, #0]
 8000b28:	e09f      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_10) {
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b30:	d114      	bne.n	8000b5c <TM_EXTI_Handler+0x250>
		/* Toggle rack pin button */
		rackPins[sample][10] = rackPins[sample][10] == true ? false : true;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4918      	ldr	r1, [pc, #96]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	440b      	add	r3, r1
 8000b42:	330a      	adds	r3, #10
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <TM_EXTI_Handler+0x242>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e000      	b.n	8000b50 <TM_EXTI_Handler+0x244>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4913      	ldr	r1, [pc, #76]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	440a      	add	r2, r1
 8000b56:	320a      	adds	r2, #10
 8000b58:	7013      	strb	r3, [r2, #0]
 8000b5a:	e086      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_11) {
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b62:	d11f      	bne.n	8000ba4 <TM_EXTI_Handler+0x298>
		/* Toggle rack pin button */
		rackPins[sample][11] = rackPins[sample][11] == true ? false : true;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <TM_EXTI_Handler+0x290>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	440b      	add	r3, r1
 8000b74:	330b      	adds	r3, #11
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <TM_EXTI_Handler+0x274>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e000      	b.n	8000b82 <TM_EXTI_Handler+0x276>
 8000b80:	2301      	movs	r3, #1
 8000b82:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <TM_EXTI_Handler+0x294>)
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	440a      	add	r2, r1
 8000b88:	320b      	adds	r2, #11
 8000b8a:	7013      	strb	r3, [r2, #0]
 8000b8c:	e06d      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
 8000b8e:	bf00      	nop
 8000b90:	20000040 	.word	0x20000040
 8000b94:	200015c0 	.word	0x200015c0
 8000b98:	200015c8 	.word	0x200015c8
 8000b9c:	200029f0 	.word	0x200029f0
 8000ba0:	200015d0 	.word	0x200015d0
	}

	else if (GPIO_Pin == GPIO_Pin_12) {
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000baa:	d114      	bne.n	8000bd6 <TM_EXTI_Handler+0x2ca>
		/* Toggle rack pin button */
		rackPins[sample][12] = rackPins[sample][12] == true ? false : true;
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <TM_EXTI_Handler+0x374>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b33      	ldr	r3, [pc, #204]	; (8000c80 <TM_EXTI_Handler+0x374>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	4933      	ldr	r1, [pc, #204]	; (8000c84 <TM_EXTI_Handler+0x378>)
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	440b      	add	r3, r1
 8000bbc:	330c      	adds	r3, #12
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <TM_EXTI_Handler+0x2bc>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e000      	b.n	8000bca <TM_EXTI_Handler+0x2be>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	492e      	ldr	r1, [pc, #184]	; (8000c84 <TM_EXTI_Handler+0x378>)
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	440a      	add	r2, r1
 8000bd0:	320c      	adds	r2, #12
 8000bd2:	7013      	strb	r3, [r2, #0]
 8000bd4:	e049      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_13) {
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bdc:	d114      	bne.n	8000c08 <TM_EXTI_Handler+0x2fc>
		/* Toggle rack pin button */
		rackPins[sample][13] = rackPins[sample][13] == true ? false : true;
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <TM_EXTI_Handler+0x374>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <TM_EXTI_Handler+0x374>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4926      	ldr	r1, [pc, #152]	; (8000c84 <TM_EXTI_Handler+0x378>)
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	440b      	add	r3, r1
 8000bee:	330d      	adds	r3, #13
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <TM_EXTI_Handler+0x2ee>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <TM_EXTI_Handler+0x2f0>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4921      	ldr	r1, [pc, #132]	; (8000c84 <TM_EXTI_Handler+0x378>)
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	440a      	add	r2, r1
 8000c02:	320d      	adds	r2, #13
 8000c04:	7013      	strb	r3, [r2, #0]
 8000c06:	e030      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_14) {
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c0e:	d114      	bne.n	8000c3a <TM_EXTI_Handler+0x32e>
		/* Toggle rack pin button */
		rackPins[sample][14] = rackPins[sample][14] == true ? false : true;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <TM_EXTI_Handler+0x374>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <TM_EXTI_Handler+0x374>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	491a      	ldr	r1, [pc, #104]	; (8000c84 <TM_EXTI_Handler+0x378>)
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	440b      	add	r3, r1
 8000c20:	330e      	adds	r3, #14
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <TM_EXTI_Handler+0x320>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e000      	b.n	8000c2e <TM_EXTI_Handler+0x322>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	4915      	ldr	r1, [pc, #84]	; (8000c84 <TM_EXTI_Handler+0x378>)
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	440a      	add	r2, r1
 8000c34:	320e      	adds	r2, #14
 8000c36:	7013      	strb	r3, [r2, #0]
 8000c38:	e017      	b.n	8000c6a <TM_EXTI_Handler+0x35e>
	}

	else if (GPIO_Pin == GPIO_Pin_15) {
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c40:	d113      	bne.n	8000c6a <TM_EXTI_Handler+0x35e>
		/* Toggle rack pin button */
		rackPins[sample][15] = rackPins[sample][15] == true ? false : true;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <TM_EXTI_Handler+0x374>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <TM_EXTI_Handler+0x374>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	490d      	ldr	r1, [pc, #52]	; (8000c84 <TM_EXTI_Handler+0x378>)
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	440b      	add	r3, r1
 8000c52:	330f      	adds	r3, #15
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <TM_EXTI_Handler+0x352>
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <TM_EXTI_Handler+0x354>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	4908      	ldr	r1, [pc, #32]	; (8000c84 <TM_EXTI_Handler+0x378>)
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	440a      	add	r2, r1
 8000c66:	320f      	adds	r2, #15
 8000c68:	7013      	strb	r3, [r2, #0]
	}

	previous = current; // for debouncing
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <TM_EXTI_Handler+0x37c>)
 8000c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c70:	4906      	ldr	r1, [pc, #24]	; (8000c8c <TM_EXTI_Handler+0x380>)
 8000c72:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	200029f0 	.word	0x200029f0
 8000c84:	200015d0 	.word	0x200015d0
 8000c88:	200015c0 	.word	0x200015c0
 8000c8c:	200015c8 	.word	0x200015c8

08000c90 <main>:
#define COMPOSER_STACK_SIZE 128
//#define PLAYBACK_STACK_SIZE 128
//#define FREESTYLE_STACK_SIZE 128

// ============================================================================
int main(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af04      	add	r7, sp, #16
	//Create kernel Task
	//xTaskCreate(vKernelTask, (signed char * ) "Kernel Task", KERNEL_STACK_SIZE, NULL, COMPOSER_TASK_PRIORITY, NULL);

	xTaskCreate(vComposerTask, (signed char * ) "Composer Task", COMPOSER_STACK_SIZE, NULL, COMPOSER_TASK_PRIORITY, NULL);
 8000c96:	2302      	movs	r3, #2
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9303      	str	r3, [sp, #12]
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <main+0x28>)
 8000ca8:	4904      	ldr	r1, [pc, #16]	; (8000cbc <main+0x2c>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	2300      	movs	r3, #0
 8000cae:	f000 fda1 	bl	80017f4 <xTaskGenericCreate>

	vTaskStartScheduler(); // This should never return.
 8000cb2:	f000 fe8d 	bl	80019d0 <vTaskStartScheduler>
	// Will only get here if there was insufficient memory to create
	// the idle task.
	while(1);
 8000cb6:	e7fe      	b.n	8000cb6 <main+0x26>
 8000cb8:	0800042d 	.word	0x0800042d
 8000cbc:	080032ac 	.word	0x080032ac

08000cc0 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	8079      	strh	r1, [r7, #2]
 8000cca:	707a      	strb	r2, [r7, #1]
 8000ccc:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d100      	bne.n	8000cd6 <TM_GPIO_Init+0x16>
		return;
 8000cd4:	e00c      	b.n	8000cf0 <TM_GPIO_Init+0x30>
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f838 	bl	8000d4c <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000cdc:	8879      	ldrh	r1, [r7, #2]
 8000cde:	787a      	ldrb	r2, [r7, #1]
 8000ce0:	783b      	ldrb	r3, [r7, #0]
 8000ce2:	7c38      	ldrb	r0, [r7, #16]
 8000ce4:	9000      	str	r0, [sp, #0]
 8000ce6:	7d38      	ldrb	r0, [r7, #20]
 8000ce8:	9001      	str	r0, [sp, #4]
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 f844 	bl	8000d78 <TM_GPIO_INT_Init>
}
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop

08000cf8 <TM_GPIO_GetPinSource>:
	/* Read twice */
	(void)GPIOx->LCKR;
	(void)GPIOx->LCKR;
}

uint16_t TM_GPIO_GetPinSource(uint16_t GPIO_Pin) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
	uint16_t pinsource = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	81fb      	strh	r3, [r7, #14]
	
	/* Get pinsource */
	while (GPIO_Pin > 1) {
 8000d06:	e005      	b.n	8000d14 <TM_GPIO_GetPinSource+0x1c>
		/* Increase pinsource */
		pinsource++;
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	81fb      	strh	r3, [r7, #14]
		/* Shift right */
		GPIO_Pin >>= 1;
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	085b      	lsrs	r3, r3, #1
 8000d12:	80fb      	strh	r3, [r7, #6]

uint16_t TM_GPIO_GetPinSource(uint16_t GPIO_Pin) {
	uint16_t pinsource = 0;
	
	/* Get pinsource */
	while (GPIO_Pin > 1) {
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d8f6      	bhi.n	8000d08 <TM_GPIO_GetPinSource+0x10>
		/* Shift right */
		GPIO_Pin >>= 1;
	}
	
	/* Return source */
	return pinsource;
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <TM_GPIO_GetPortSource>:

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000d36:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000d3a:	0a9b      	lsrs	r3, r3, #10
 8000d3c:	b29b      	uxth	r3, r3
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8000d54:	4c07      	ldr	r4, [pc, #28]	; (8000d74 <TM_GPIO_INT_EnableClock+0x28>)
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <TM_GPIO_INT_EnableClock+0x28>)
 8000d58:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffe4 	bl	8000d28 <TM_GPIO_GetPortSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2201      	movs	r2, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	432b      	orrs	r3, r5
 8000d6a:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bdb0      	pop	{r4, r5, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	8079      	strh	r1, [r7, #2]
 8000d82:	707a      	strb	r2, [r7, #1]
 8000d84:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffce 	bl	8000d28 <TM_GPIO_GetPortSource>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e066      	b.n	8000e64 <TM_GPIO_INT_Init+0xec>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	fa42 f303 	asr.w	r3, r2, r3
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d100      	bne.n	8000da8 <TM_GPIO_INT_Init+0x30>
			continue;
 8000da6:	e05a      	b.n	8000e5e <TM_GPIO_INT_Init+0xe6>
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8000da8:	7bba      	ldrb	r2, [r7, #14]
 8000daa:	7bb9      	ldrb	r1, [r7, #14]
 8000dac:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <TM_GPIO_INT_Init+0xf8>)
 8000dae:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000db2:	b299      	uxth	r1, r3
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2001      	movs	r0, #1
 8000db8:	fa00 f303 	lsl.w	r3, r0, r3
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <TM_GPIO_INT_Init+0xf8>)
 8000dc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	401a      	ands	r2, r3
 8000ddc:	7e39      	ldrb	r1, [r7, #24]
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2103      	movs	r1, #3
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	7879      	ldrb	r1, [r7, #1]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8000e0e:	787b      	ldrb	r3, [r7, #1]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d002      	beq.n	8000e1a <TM_GPIO_INT_Init+0xa2>
 8000e14:	787b      	ldrb	r3, [r7, #1]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d121      	bne.n	8000e5e <TM_GPIO_INT_Init+0xe6>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	7839      	ldrb	r1, [r7, #0]
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2103      	movs	r1, #3
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	7f39      	ldrb	r1, [r7, #28]
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	3301      	adds	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b0f      	cmp	r3, #15
 8000e68:	d995      	bls.n	8000d96 <TM_GPIO_INT_Init+0x1e>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000050 	.word	0x20000050

08000e74 <TM_EXTI_Attach>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_exti.h"

TM_EXTI_Result_t TM_EXTI_Attach(GPIO_TypeDef* GPIOx, uint16_t GPIO_Line, TM_EXTI_Trigger_t trigger) {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	460a      	mov	r2, r1
 8000e80:	807a      	strh	r2, [r7, #2]
 8000e82:	707b      	strb	r3, [r7, #1]
	NVIC_InitTypeDef NVIC_InitStruct;
	TM_GPIO_PuPd_t PuPd;
	uint8_t pinsource, portsource, irqchannel;
	
	/* Check if user wants to init more than one gpio pin for exti at a time */
	if (!(GPIO_Line && !(GPIO_Line & (GPIO_Line - 1)))) {
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d005      	beq.n	8000e96 <TM_EXTI_Attach+0x22>
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	4013      	ands	r3, r2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d022      	beq.n	8000edc <TM_EXTI_Attach+0x68>
		uint8_t i;
		/* Check all pins */
		for (i = 0; i < 0x10; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	757b      	strb	r3, [r7, #21]
 8000e9a:	e01a      	b.n	8000ed2 <TM_EXTI_Attach+0x5e>
			if (GPIO_Line & (1 << i)) {
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	7d7b      	ldrb	r3, [r7, #21]
 8000ea0:	fa42 f303 	asr.w	r3, r2, r3
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00f      	beq.n	8000ecc <TM_EXTI_Attach+0x58>
				/* Attach one pin at a time */
				if (TM_EXTI_Attach(GPIOx, 1 << i, trigger) != TM_EXTI_Result_Ok) {
 8000eac:	7d7b      	ldrb	r3, [r7, #21]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	787b      	ldrb	r3, [r7, #1]
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	f7ff ffd9 	bl	8000e74 <TM_EXTI_Attach>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <TM_EXTI_Attach+0x58>
					/* If one failed, return error */
					return TM_EXTI_Result_Error;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e10b      	b.n	80010e4 <TM_EXTI_Attach+0x270>
	
	/* Check if user wants to init more than one gpio pin for exti at a time */
	if (!(GPIO_Line && !(GPIO_Line & (GPIO_Line - 1)))) {
		uint8_t i;
		/* Check all pins */
		for (i = 0; i < 0x10; i++) {
 8000ecc:	7d7b      	ldrb	r3, [r7, #21]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	757b      	strb	r3, [r7, #21]
 8000ed2:	7d7b      	ldrb	r3, [r7, #21]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d9e1      	bls.n	8000e9c <TM_EXTI_Attach+0x28>
				}
			}
		}
				
		/* Return OK, all succedded */
		return TM_EXTI_Result_Ok;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e103      	b.n	80010e4 <TM_EXTI_Attach+0x270>
	}
	
	/* Check if line is already in use */
	if (
		(EXTI->IMR & GPIO_Line) || /*!< Interrupt already attached */
 8000edc:	4b83      	ldr	r3, [pc, #524]	; (80010ec <TM_EXTI_Attach+0x278>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	4013      	ands	r3, r2
		/* Return OK, all succedded */
		return TM_EXTI_Result_Ok;
	}
	
	/* Check if line is already in use */
	if (
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d105      	bne.n	8000ef4 <TM_EXTI_Attach+0x80>
		(EXTI->IMR & GPIO_Line) || /*!< Interrupt already attached */
		(EXTI->EMR & GPIO_Line)    /*!< Event already attached */
 8000ee8:	4b80      	ldr	r3, [pc, #512]	; (80010ec <TM_EXTI_Attach+0x278>)
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	4013      	ands	r3, r2
		return TM_EXTI_Result_Ok;
	}
	
	/* Check if line is already in use */
	if (
		(EXTI->IMR & GPIO_Line) || /*!< Interrupt already attached */
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <TM_EXTI_Attach+0x84>
		(EXTI->EMR & GPIO_Line)    /*!< Event already attached */
	) {
		/* Return error */
		return TM_EXTI_Result_Error;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e0f5      	b.n	80010e4 <TM_EXTI_Attach+0x270>
	}
	
	/* Get IRQ channel */
	switch (GPIO_Line) {
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	2b80      	cmp	r3, #128	; 0x80
 8000efc:	d043      	beq.n	8000f86 <TM_EXTI_Attach+0x112>
 8000efe:	2b80      	cmp	r3, #128	; 0x80
 8000f00:	dc11      	bgt.n	8000f26 <TM_EXTI_Attach+0xb2>
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d039      	beq.n	8000f7a <TM_EXTI_Attach+0x106>
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	dc06      	bgt.n	8000f18 <TM_EXTI_Attach+0xa4>
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d02f      	beq.n	8000f6e <TM_EXTI_Attach+0xfa>
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d030      	beq.n	8000f74 <TM_EXTI_Attach+0x100>
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d028      	beq.n	8000f68 <TM_EXTI_Attach+0xf4>
 8000f16:	e03c      	b.n	8000f92 <TM_EXTI_Attach+0x11e>
 8000f18:	2b20      	cmp	r3, #32
 8000f1a:	d034      	beq.n	8000f86 <TM_EXTI_Attach+0x112>
 8000f1c:	2b40      	cmp	r3, #64	; 0x40
 8000f1e:	d032      	beq.n	8000f86 <TM_EXTI_Attach+0x112>
 8000f20:	2b10      	cmp	r3, #16
 8000f22:	d02d      	beq.n	8000f80 <TM_EXTI_Attach+0x10c>
 8000f24:	e035      	b.n	8000f92 <TM_EXTI_Attach+0x11e>
 8000f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f2a:	d02f      	beq.n	8000f8c <TM_EXTI_Attach+0x118>
 8000f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f30:	dc09      	bgt.n	8000f46 <TM_EXTI_Attach+0xd2>
 8000f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f36:	d026      	beq.n	8000f86 <TM_EXTI_Attach+0x112>
 8000f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3c:	d026      	beq.n	8000f8c <TM_EXTI_Attach+0x118>
 8000f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f42:	d020      	beq.n	8000f86 <TM_EXTI_Attach+0x112>
 8000f44:	e025      	b.n	8000f92 <TM_EXTI_Attach+0x11e>
 8000f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f4a:	d01f      	beq.n	8000f8c <TM_EXTI_Attach+0x118>
 8000f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f50:	dc03      	bgt.n	8000f5a <TM_EXTI_Attach+0xe6>
 8000f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f56:	d019      	beq.n	8000f8c <TM_EXTI_Attach+0x118>
 8000f58:	e01b      	b.n	8000f92 <TM_EXTI_Attach+0x11e>
 8000f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f5e:	d015      	beq.n	8000f8c <TM_EXTI_Attach+0x118>
 8000f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f64:	d012      	beq.n	8000f8c <TM_EXTI_Attach+0x118>
 8000f66:	e014      	b.n	8000f92 <TM_EXTI_Attach+0x11e>
		case GPIO_PIN_0:
			irqchannel = EXTI0_IRQn;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	75bb      	strb	r3, [r7, #22]
			break;
 8000f6c:	e013      	b.n	8000f96 <TM_EXTI_Attach+0x122>
		case GPIO_PIN_1:
			irqchannel = EXTI1_IRQn;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	75bb      	strb	r3, [r7, #22]
			break;
 8000f72:	e010      	b.n	8000f96 <TM_EXTI_Attach+0x122>
		case GPIO_PIN_2:
			irqchannel = EXTI2_IRQn;
 8000f74:	2308      	movs	r3, #8
 8000f76:	75bb      	strb	r3, [r7, #22]
			break;
 8000f78:	e00d      	b.n	8000f96 <TM_EXTI_Attach+0x122>
		case GPIO_PIN_3:
			irqchannel = EXTI3_IRQn;
 8000f7a:	2309      	movs	r3, #9
 8000f7c:	75bb      	strb	r3, [r7, #22]
			break;
 8000f7e:	e00a      	b.n	8000f96 <TM_EXTI_Attach+0x122>
		case GPIO_Pin_4:
			irqchannel = EXTI4_IRQn;
 8000f80:	230a      	movs	r3, #10
 8000f82:	75bb      	strb	r3, [r7, #22]
			break;
 8000f84:	e007      	b.n	8000f96 <TM_EXTI_Attach+0x122>
		case GPIO_PIN_5:
		case GPIO_PIN_6:
		case GPIO_PIN_7:
		case GPIO_PIN_8:
		case GPIO_PIN_9:
			irqchannel = EXTI9_5_IRQn;
 8000f86:	2317      	movs	r3, #23
 8000f88:	75bb      	strb	r3, [r7, #22]
			break;
 8000f8a:	e004      	b.n	8000f96 <TM_EXTI_Attach+0x122>
		case GPIO_PIN_11:
		case GPIO_PIN_12:
		case GPIO_PIN_13:
		case GPIO_PIN_14:
		case GPIO_PIN_15:
			irqchannel = EXTI15_10_IRQn;
 8000f8c:	2328      	movs	r3, #40	; 0x28
 8000f8e:	75bb      	strb	r3, [r7, #22]
			break;
 8000f90:	e001      	b.n	8000f96 <TM_EXTI_Attach+0x122>
		default:
			return TM_EXTI_Result_Error;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e0a6      	b.n	80010e4 <TM_EXTI_Attach+0x270>
	}

	/* Check pull settings */
	if (trigger == TM_EXTI_Trigger_Falling) {
 8000f96:	787b      	ldrb	r3, [r7, #1]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d102      	bne.n	8000fa2 <TM_EXTI_Attach+0x12e>
		PuPd = TM_GPIO_PuPd_UP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	75fb      	strb	r3, [r7, #23]
 8000fa0:	e007      	b.n	8000fb2 <TM_EXTI_Attach+0x13e>
	} else if (trigger == TM_EXTI_Trigger_Rising) {
 8000fa2:	787b      	ldrb	r3, [r7, #1]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <TM_EXTI_Attach+0x13a>
		PuPd = TM_GPIO_PuPd_DOWN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	75fb      	strb	r3, [r7, #23]
 8000fac:	e001      	b.n	8000fb2 <TM_EXTI_Attach+0x13e>
	} else {
		PuPd = TM_GPIO_PuPd_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Init GPIO pin */
	TM_GPIO_Init(GPIOx, GPIO_Line, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, PuPd, TM_GPIO_Speed_Low);
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	9201      	str	r2, [sp, #4]
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f7ff fe7c 	bl	8000cc0 <TM_GPIO_Init>
	
	/* Calculate pinsource */
	pinsource = TM_GPIO_GetPinSource(GPIO_Line);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe94 	bl	8000cf8 <TM_GPIO_GetPinSource>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	753b      	strb	r3, [r7, #20]
	
	/* Calculate portsource */
	portsource = TM_GPIO_GetPortSource(GPIOx);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff fea7 	bl	8000d28 <TM_GPIO_GetPortSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	74fb      	strb	r3, [r7, #19]
	
	/* Enable SYSCFG clock */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000fde:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <TM_EXTI_Attach+0x27c>)
 8000fe0:	4a43      	ldr	r2, [pc, #268]	; (80010f0 <TM_EXTI_Attach+0x27c>)
 8000fe2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000fe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44
	
	/* Connect proper GPIO to SYSCFG */
	SYSCFG->EXTICR[pinsource >> 2] &= ~(0x0F << (0x04 * (pinsource & 0x03)));
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <TM_EXTI_Attach+0x280>)
 8000fec:	7d3a      	ldrb	r2, [r7, #20]
 8000fee:	0892      	lsrs	r2, r2, #2
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	4940      	ldr	r1, [pc, #256]	; (80010f4 <TM_EXTI_Attach+0x280>)
 8000ff4:	7d38      	ldrb	r0, [r7, #20]
 8000ff6:	0880      	lsrs	r0, r0, #2
 8000ff8:	b2c0      	uxtb	r0, r0
 8000ffa:	3002      	adds	r0, #2
 8000ffc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8001000:	7d39      	ldrb	r1, [r7, #20]
 8001002:	f001 0103 	and.w	r1, r1, #3
 8001006:	0089      	lsls	r1, r1, #2
 8001008:	240f      	movs	r4, #15
 800100a:	fa04 f101 	lsl.w	r1, r4, r1
 800100e:	43c9      	mvns	r1, r1
 8001010:	4001      	ands	r1, r0
 8001012:	3202      	adds	r2, #2
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SYSCFG->EXTICR[pinsource >> 2] |= (portsource << (0x04 * (pinsource & 0x03)));
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <TM_EXTI_Attach+0x280>)
 800101a:	7d3a      	ldrb	r2, [r7, #20]
 800101c:	0892      	lsrs	r2, r2, #2
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	4934      	ldr	r1, [pc, #208]	; (80010f4 <TM_EXTI_Attach+0x280>)
 8001022:	7d38      	ldrb	r0, [r7, #20]
 8001024:	0880      	lsrs	r0, r0, #2
 8001026:	b2c0      	uxtb	r0, r0
 8001028:	3002      	adds	r0, #2
 800102a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800102e:	7cfc      	ldrb	r4, [r7, #19]
 8001030:	7d39      	ldrb	r1, [r7, #20]
 8001032:	f001 0103 	and.w	r1, r1, #3
 8001036:	0089      	lsls	r1, r1, #2
 8001038:	fa04 f101 	lsl.w	r1, r4, r1
 800103c:	4301      	orrs	r1, r0
 800103e:	3202      	adds	r2, #2
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	
	/* Clear first */
	EXTI->IMR &= ~GPIO_Line;
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <TM_EXTI_Attach+0x278>)
 8001046:	4a29      	ldr	r2, [pc, #164]	; (80010ec <TM_EXTI_Attach+0x278>)
 8001048:	6811      	ldr	r1, [r2, #0]
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	43d2      	mvns	r2, r2
 800104e:	400a      	ands	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
	EXTI->EMR &= ~GPIO_Line;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <TM_EXTI_Attach+0x278>)
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <TM_EXTI_Attach+0x278>)
 8001056:	6851      	ldr	r1, [r2, #4]
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	43d2      	mvns	r2, r2
 800105c:	400a      	ands	r2, r1
 800105e:	605a      	str	r2, [r3, #4]
	
	/* Select interrupt mode */
	EXTI->IMR |= GPIO_Line;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <TM_EXTI_Attach+0x278>)
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <TM_EXTI_Attach+0x278>)
 8001064:	6811      	ldr	r1, [r2, #0]
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
	
	/* Clear first */
	EXTI->FTSR &= ~GPIO_Line;
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <TM_EXTI_Attach+0x278>)
 800106e:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <TM_EXTI_Attach+0x278>)
 8001070:	68d1      	ldr	r1, [r2, #12]
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	43d2      	mvns	r2, r2
 8001076:	400a      	ands	r2, r1
 8001078:	60da      	str	r2, [r3, #12]
	EXTI->RTSR &= ~GPIO_Line;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <TM_EXTI_Attach+0x278>)
 800107c:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <TM_EXTI_Attach+0x278>)
 800107e:	6891      	ldr	r1, [r2, #8]
 8001080:	887a      	ldrh	r2, [r7, #2]
 8001082:	43d2      	mvns	r2, r2
 8001084:	400a      	ands	r2, r1
 8001086:	609a      	str	r2, [r3, #8]
	
	/* Select edge */
	if (trigger == TM_EXTI_Trigger_Falling) {
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d106      	bne.n	800109c <TM_EXTI_Attach+0x228>
		/* Write to falling edge register */
		EXTI->FTSR |= GPIO_Line;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <TM_EXTI_Attach+0x278>)
 8001090:	4a16      	ldr	r2, [pc, #88]	; (80010ec <TM_EXTI_Attach+0x278>)
 8001092:	68d1      	ldr	r1, [r2, #12]
 8001094:	887a      	ldrh	r2, [r7, #2]
 8001096:	430a      	orrs	r2, r1
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	e015      	b.n	80010c8 <TM_EXTI_Attach+0x254>
	} else if (trigger == TM_EXTI_Trigger_Rising) {
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <TM_EXTI_Attach+0x23c>
		/* Write to rising edge register */
		EXTI->RTSR |= GPIO_Line;
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <TM_EXTI_Attach+0x278>)
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <TM_EXTI_Attach+0x278>)
 80010a6:	6891      	ldr	r1, [r2, #8]
 80010a8:	887a      	ldrh	r2, [r7, #2]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	e00b      	b.n	80010c8 <TM_EXTI_Attach+0x254>
	} else {
		/* Write to rising and falling edge registers */
		EXTI->FTSR |= GPIO_Line;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <TM_EXTI_Attach+0x278>)
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <TM_EXTI_Attach+0x278>)
 80010b4:	68d1      	ldr	r1, [r2, #12]
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	60da      	str	r2, [r3, #12]
		EXTI->RTSR |= GPIO_Line;
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <TM_EXTI_Attach+0x278>)
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <TM_EXTI_Attach+0x278>)
 80010c0:	6891      	ldr	r1, [r2, #8]
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	609a      	str	r2, [r3, #8]
	}
	
	/* Add to NVIC */
	NVIC_InitStruct.NVIC_IRQChannel = irqchannel;
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	733b      	strb	r3, [r7, #12]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = EXTI_NVIC_PRIORITY;
 80010cc:	230a      	movs	r3, #10
 80010ce:	737b      	strb	r3, [r7, #13]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = pinsource;
 80010d0:	7d3b      	ldrb	r3, [r7, #20]
 80010d2:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStruct);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 f831 	bl	8003144 <NVIC_Init>

	/* Return OK */
	return TM_EXTI_Result_Ok;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	40013c00 	.word	0x40013c00
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800

080010f8 <EXTI0_IRQHandler>:
	EXTI->RTSR &= 0xFFFF0000;
	EXTI->PR &= 0xFFFF0000;
}

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_0
void EXTI0_IRQHandler(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR0)) {
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <EXTI0_IRQHandler+0x20>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <EXTI0_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR0;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <EXTI0_IRQHandler+0x20>)
 800110a:	2201      	movs	r2, #1
 800110c:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_0);
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff fbfc 	bl	800090c <TM_EXTI_Handler>
	}
}
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40013c00 	.word	0x40013c00

0800111c <EXTI1_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_1
void EXTI1_IRQHandler(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR1)) {
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <EXTI1_IRQHandler+0x20>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <EXTI1_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR1;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <EXTI1_IRQHandler+0x20>)
 800112e:	2202      	movs	r2, #2
 8001130:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_1);
 8001132:	2002      	movs	r0, #2
 8001134:	f7ff fbea 	bl	800090c <TM_EXTI_Handler>
	}
}
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40013c00 	.word	0x40013c00

08001140 <EXTI2_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_2
void EXTI2_IRQHandler(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR2)) {
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <EXTI2_IRQHandler+0x20>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <EXTI2_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR2;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <EXTI2_IRQHandler+0x20>)
 8001152:	2204      	movs	r2, #4
 8001154:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_2);
 8001156:	2004      	movs	r0, #4
 8001158:	f7ff fbd8 	bl	800090c <TM_EXTI_Handler>
	}
}
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40013c00 	.word	0x40013c00

08001164 <EXTI3_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_3
void EXTI3_IRQHandler(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR3)) {
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <EXTI3_IRQHandler+0x20>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <EXTI3_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR3;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <EXTI3_IRQHandler+0x20>)
 8001176:	2208      	movs	r2, #8
 8001178:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_3);
 800117a:	2008      	movs	r0, #8
 800117c:	f7ff fbc6 	bl	800090c <TM_EXTI_Handler>
	}
}
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40013c00 	.word	0x40013c00

08001188 <EXTI4_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_4
void EXTI4_IRQHandler(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR4)) {
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <EXTI4_IRQHandler+0x20>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <EXTI4_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR4;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <EXTI4_IRQHandler+0x20>)
 800119a:	2210      	movs	r2, #16
 800119c:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_4);
 800119e:	2010      	movs	r0, #16
 80011a0:	f7ff fbb4 	bl	800090c <TM_EXTI_Handler>
	}
}
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40013c00 	.word	0x40013c00

080011ac <EXTI9_5_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_9_5
void EXTI9_5_IRQHandler(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR5)) {
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <EXTI9_5_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR5;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 80011be:	2220      	movs	r2, #32
 80011c0:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_5);
 80011c2:	2020      	movs	r0, #32
 80011c4:	f7ff fba2 	bl	800090c <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR6)) {
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <EXTI9_5_IRQHandler+0x34>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR6;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 80011d6:	2240      	movs	r2, #64	; 0x40
 80011d8:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_6);
 80011da:	2040      	movs	r0, #64	; 0x40
 80011dc:	f7ff fb96 	bl	800090c <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR7)) {
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <EXTI9_5_IRQHandler+0x4c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR7;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_7);
 80011f2:	2080      	movs	r0, #128	; 0x80
 80011f4:	f7ff fb8a 	bl	800090c <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR8)) {
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <EXTI9_5_IRQHandler+0x68>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR8;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 8001206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120a:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_8);
 800120c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001210:	f7ff fb7c 	bl	800090c <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR9)) {
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <EXTI9_5_IRQHandler+0x84>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR9;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <EXTI9_5_IRQHandler+0x88>)
 8001222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001226:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_9);
 8001228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800122c:	f7ff fb6e 	bl	800090c <TM_EXTI_Handler>
	}
}
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40013c00 	.word	0x40013c00

08001238 <EXTI15_10_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_15_10
void EXTI15_10_IRQHandler(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR10)) {
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <EXTI15_10_IRQHandler+0x20>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR10;
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 800124a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800124e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_10);
 8001250:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001254:	f7ff fb5a 	bl	800090c <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR11)) {
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001260:	2b00      	cmp	r3, #0
 8001262:	d007      	beq.n	8001274 <EXTI15_10_IRQHandler+0x3c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR11;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 8001266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126a:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_11);
 800126c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001270:	f7ff fb4c 	bl	800090c <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR12)) {
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <EXTI15_10_IRQHandler+0x58>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR12;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 8001282:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001286:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_12);
 8001288:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800128c:	f7ff fb3e 	bl	800090c <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR13)) {
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <EXTI15_10_IRQHandler+0x74>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR13;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 800129e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a2:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_13);
 80012a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012a8:	f7ff fb30 	bl	800090c <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR14)) {
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <EXTI15_10_IRQHandler+0x90>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR14;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012be:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_14);
 80012c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012c4:	f7ff fb22 	bl	800090c <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR15)) {
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <EXTI15_10_IRQHandler+0xac>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR15;
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <EXTI15_10_IRQHandler+0xb0>)
 80012d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012da:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_15);
 80012dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012e0:	f7ff fb14 	bl	800090c <TM_EXTI_Handler>
	}
}
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40013c00 	.word	0x40013c00

080012ec <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80012f6:	f000 fa53 	bl	80017a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <xTimerCreateTimerTask+0x50>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00f      	beq.n	8001322 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
 8001302:	2302      	movs	r3, #2
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	2300      	movs	r3, #0
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2300      	movs	r3, #0
 8001310:	9303      	str	r3, [sp, #12]
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <xTimerCreateTimerTask+0x54>)
 8001314:	490b      	ldr	r1, [pc, #44]	; (8001344 <xTimerCreateTimerTask+0x58>)
 8001316:	f44f 7282 	mov.w	r2, #260	; 0x104
 800131a:	2300      	movs	r3, #0
 800131c:	f000 fa6a 	bl	80017f4 <xTaskGenericCreate>
 8001320:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d104      	bne.n	8001332 <xTimerCreateTimerTask+0x46>
 8001328:	f04f 0050 	mov.w	r0, #80	; 0x50
 800132c:	f380 8811 	msr	BASEPRI, r0
 8001330:	e7fe      	b.n	8001330 <xTimerCreateTimerTask+0x44>
	return xReturn;
 8001332:	687b      	ldr	r3, [r7, #4]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000098 	.word	0x20000098
 8001340:	08001449 	.word	0x08001449
 8001344:	080032bc 	.word	0x080032bc

08001348 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <xTimerGenericCommand+0x88>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d030      	beq.n	80013c4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d11c      	bne.n	80013ae <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001374:	f000 ff84 	bl	8002280 <xTaskGetSchedulerState>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d10b      	bne.n	8001396 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <xTimerGenericCommand+0x88>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800138c:	2300      	movs	r3, #0
 800138e:	f001 f899 	bl	80024c4 <xQueueGenericSend>
 8001392:	61f8      	str	r0, [r7, #28]
 8001394:	e016      	b.n	80013c4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <xTimerGenericCommand+0x88>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	2200      	movs	r2, #0
 80013a4:	2300      	movs	r3, #0
 80013a6:	f001 f88d 	bl	80024c4 <xQueueGenericSend>
 80013aa:	61f8      	str	r0, [r7, #28]
 80013ac:	e00a      	b.n	80013c4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <xTimerGenericCommand+0x88>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	2300      	movs	r3, #0
 80013be:	f001 f921 	bl	8002604 <xQueueGenericSendFromISR>
 80013c2:	61f8      	str	r0, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 80013c4:	69fb      	ldr	r3, [r7, #28]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000098 	.word	0x20000098

080013d4 <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <prvProcessExpiredTimer+0x70>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3304      	adds	r3, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 fd29 	bl	8002e44 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d11d      	bne.n	8001436 <prvProcessExpiredTimer+0x62>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	4619      	mov	r1, r3
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f000 f8ab 	bl	8001564 <prvInsertTimerInActiveList>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d110      	bne.n	8001436 <prvProcessExpiredTimer+0x62>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8001414:	2300      	movs	r3, #0
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	2100      	movs	r1, #0
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	2300      	movs	r3, #0
 8001420:	f7ff ff92 	bl	8001348 <xTimerGenericCommand>
 8001424:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d104      	bne.n	8001436 <prvProcessExpiredTimer+0x62>
 800142c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001430:	f380 8811 	msr	BASEPRI, r0
 8001434:	e7fe      	b.n	8001434 <prvProcessExpiredTimer+0x60>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	4798      	blx	r3
}
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000090 	.word	0x20000090

08001448 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f83f 	bl	80014d8 <prvGetNextExpireTime>
 800145a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	4619      	mov	r1, r3
 8001462:	f000 f803 	bl	800146c <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 8001466:	f000 f8bf 	bl	80015e8 <prvProcessReceivedCommands>
	}
 800146a:	e7f1      	b.n	8001450 <prvTimerTask+0x8>

0800146c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001476:	f000 fae5 	bl	8001a44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f84e 	bl	8001520 <prvSampleTimeNow>
 8001484:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d11e      	bne.n	80014ca <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10a      	bne.n	80014a8 <prvProcessTimerOrBlockTask+0x3c>
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	429a      	cmp	r2, r3
 8001498:	d806      	bhi.n	80014a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 800149a:	f000 fae1 	bl	8001a60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	68f9      	ldr	r1, [r7, #12]
 80014a2:	f7ff ff97 	bl	80013d4 <prvProcessExpiredTimer>
 80014a6:	e012      	b.n	80014ce <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <prvProcessTimerOrBlockTask+0x68>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1acb      	subs	r3, r1, r3
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f001 fad3 	bl	8002a60 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80014ba:	f000 fad1 	bl	8001a60 <xTaskResumeAll>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d104      	bne.n	80014ce <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 80014c4:	f001 fba0 	bl	8002c08 <vPortYieldFromISR>
 80014c8:	e001      	b.n	80014ce <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 80014ca:	f000 fac9 	bl	8001a60 <xTaskResumeAll>
		}
	}
}
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000098 	.word	0x20000098

080014d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <prvGetNextExpireTime+0x44>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bf14      	ite	ne
 80014ea:	2300      	movne	r3, #0
 80014ec:	2301      	moveq	r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <prvGetNextExpireTime+0x44>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e001      	b.n	800150e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	20000090 	.word	0x20000090

08001520 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8001528:	f000 fb1e 	bl	8001b68 <xTaskGetTickCount>
 800152c:	60f8      	str	r0, [r7, #12]
	
	if( xTimeNow < xLastTime )
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <prvSampleTimeNow+0x40>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d208      	bcs.n	800154a <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <prvSampleTimeNow+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f8d3 	bl	80016e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e002      	b.n	8001550 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <prvSampleTimeNow+0x40>)
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	601a      	str	r2, [r3, #0]
	
	return xTimeNow;
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000009c 	.word	0x2000009c

08001564 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d812      	bhi.n	80015b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	1ad2      	subs	r2, r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	429a      	cmp	r2, r3
 8001596:	d302      	bcc.n	800159e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001598:	2301      	movs	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e01b      	b.n	80015d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <prvInsertTimerInActiveList+0x7c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3304      	adds	r3, #4
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f001 fc13 	bl	8002dd4 <vListInsert>
 80015ae:	e012      	b.n	80015d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d206      	bcs.n	80015c6 <prvInsertTimerInActiveList+0x62>
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d302      	bcc.n	80015c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80015c0:	2301      	movs	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e007      	b.n	80015d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <prvInsertTimerInActiveList+0x80>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3304      	adds	r3, #4
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f001 fbff 	bl	8002dd4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80015d6:	697b      	ldr	r3, [r7, #20]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000094 	.word	0x20000094
 80015e4:	20000090 	.word	0x20000090

080015e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff95 	bl	8001520 <prvSampleTimeNow>
 80015f6:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80015f8:	e063      	b.n	80016c2 <prvProcessReceivedCommands+0xda>
	{
		pxTimer = xMessage.pxTimer;
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	3304      	adds	r3, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f001 fc17 	bl	8002e44 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d851      	bhi.n	80016c0 <prvProcessReceivedCommands+0xd8>
 800161c:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <prvProcessReceivedCommands+0x3c>)
 800161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001622:	bf00      	nop
 8001624:	08001635 	.word	0x08001635
 8001628:	080016c1 	.word	0x080016c1
 800162c:	0800168b 	.word	0x0800168b
 8001630:	080016b9 	.word	0x080016b9
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	441a      	add	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	69b8      	ldr	r0, [r7, #24]
 8001640:	4611      	mov	r1, r2
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	f7ff ff8e 	bl	8001564 <prvInsertTimerInActiveList>
 8001648:	4603      	mov	r3, r0
 800164a:	2b01      	cmp	r3, #1
 800164c:	d11c      	bne.n	8001688 <prvProcessReceivedCommands+0xa0>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	69b8      	ldr	r0, [r7, #24]
 8001654:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d114      	bne.n	8001688 <prvProcessReceivedCommands+0xa0>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4413      	add	r3, r2
 8001666:	2200      	movs	r2, #0
 8001668:	9200      	str	r2, [sp, #0]
 800166a:	69b8      	ldr	r0, [r7, #24]
 800166c:	2100      	movs	r1, #0
 800166e:	461a      	mov	r2, r3
 8001670:	2300      	movs	r3, #0
 8001672:	f7ff fe69 	bl	8001348 <xTimerGenericCommand>
 8001676:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d104      	bne.n	8001688 <prvProcessReceivedCommands+0xa0>
 800167e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001682:	f380 8811 	msr	BASEPRI, r0
 8001686:	e7fe      	b.n	8001686 <prvProcessReceivedCommands+0x9e>
						( void ) xResult;
					}
				}
				break;
 8001688:	e01b      	b.n	80016c2 <prvProcessReceivedCommands+0xda>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d104      	bne.n	80016a2 <prvProcessReceivedCommands+0xba>
 8001698:	f04f 0050 	mov.w	r0, #80	; 0x50
 800169c:	f380 8811 	msr	BASEPRI, r0
 80016a0:	e7fe      	b.n	80016a0 <prvProcessReceivedCommands+0xb8>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	69b8      	ldr	r0, [r7, #24]
 80016ac:	4619      	mov	r1, r3
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f7ff ff57 	bl	8001564 <prvInsertTimerInActiveList>
				break;
 80016b6:	e004      	b.n	80016c2 <prvProcessReceivedCommands+0xda>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 80016b8:	69b8      	ldr	r0, [r7, #24]
 80016ba:	f001 fa37 	bl	8002b2c <vPortFree>
				break;
 80016be:	e000      	b.n	80016c2 <prvProcessReceivedCommands+0xda>

			default	:			
				/* Don't expect to get here. */
				break;
 80016c0:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <prvProcessReceivedCommands+0xfc>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	2200      	movs	r2, #0
 80016d0:	2300      	movs	r3, #0
 80016d2:	f000 fff9 	bl	80026c8 <xQueueGenericReceive>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d18e      	bne.n	80015fa <prvProcessReceivedCommands+0x12>
			default	:			
				/* Don't expect to get here. */
				break;
		}
	}
}
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000098 	.word	0x20000098

080016e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80016f0:	e03f      	b.n	8001772 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80016f2:	4b29      	ldr	r3, [pc, #164]	; (8001798 <prvSwitchTimerLists+0xb0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <prvSwitchTimerLists+0xb0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	3304      	adds	r3, #4
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fb9a 	bl	8002e44 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	69b8      	ldr	r0, [r7, #24]
 8001716:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d128      	bne.n	8001772 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	429a      	cmp	r2, r3
 8001730:	d90e      	bls.n	8001750 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <prvSwitchTimerLists+0xb0>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	3304      	adds	r3, #4
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f001 fb43 	bl	8002dd4 <vListInsert>
 800174e:	e010      	b.n	8001772 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8001750:	2300      	movs	r3, #0
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	69b8      	ldr	r0, [r7, #24]
 8001756:	2100      	movs	r1, #0
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	2300      	movs	r3, #0
 800175c:	f7ff fdf4 	bl	8001348 <xTimerGenericCommand>
 8001760:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d104      	bne.n	8001772 <prvSwitchTimerLists+0x8a>
 8001768:	f04f 0050 	mov.w	r0, #80	; 0x50
 800176c:	f380 8811 	msr	BASEPRI, r0
 8001770:	e7fe      	b.n	8001770 <prvSwitchTimerLists+0x88>
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <prvSwitchTimerLists+0xb0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ba      	bne.n	80016f2 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <prvSwitchTimerLists+0xb0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <prvSwitchTimerLists+0xb4>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <prvSwitchTimerLists+0xb0>)
 8001788:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <prvSwitchTimerLists+0xb4>)
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000090 	.word	0x20000090
 800179c:	20000094 	.word	0x20000094

080017a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80017a4:	f001 fa3c 	bl	8002c20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <prvCheckForValidListAndQueue+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d113      	bne.n	80017d8 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <prvCheckForValidListAndQueue+0x44>)
 80017b2:	f001 fabb 	bl	8002d2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <prvCheckForValidListAndQueue+0x48>)
 80017b8:	f001 fab8 	bl	8002d2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <prvCheckForValidListAndQueue+0x4c>)
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <prvCheckForValidListAndQueue+0x44>)
 80017c0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <prvCheckForValidListAndQueue+0x50>)
 80017c4:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <prvCheckForValidListAndQueue+0x48>)
 80017c6:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 80017c8:	200a      	movs	r0, #10
 80017ca:	210c      	movs	r1, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	f000 fe0d 	bl	80023ec <xQueueGenericCreate>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <prvCheckForValidListAndQueue+0x40>)
 80017d6:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 80017d8:	f001 fa34 	bl	8002c44 <vPortExitCritical>
}
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000098 	.word	0x20000098
 80017e4:	20000068 	.word	0x20000068
 80017e8:	2000007c 	.word	0x2000007c
 80017ec:	20000090 	.word	0x20000090
 80017f0:	20000094 	.word	0x20000094

080017f4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d104      	bne.n	8001814 <xTaskGenericCreate+0x20>
 800180a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800180e:	f380 8811 	msr	BASEPRI, r0
 8001812:	e7fe      	b.n	8001812 <xTaskGenericCreate+0x1e>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 8001814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001816:	2b04      	cmp	r3, #4
 8001818:	d904      	bls.n	8001824 <xTaskGenericCreate+0x30>
 800181a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800181e:	f380 8811 	msr	BASEPRI, r0
 8001822:	e7fe      	b.n	8001822 <xTaskGenericCreate+0x2e>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800182a:	f000 fcd7 	bl	80021dc <prvAllocateTCBAndStack>
 800182e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d07e      	beq.n	8001934 <xTaskGenericCreate+0x140>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001840:	3b01      	subs	r3, #1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f023 0307 	bic.w	r3, r3, #7
 800184e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <xTaskGenericCreate+0x70>
 800185a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800185e:	f380 8811 	msr	BASEPRI, r0
 8001862:	e7fe      	b.n	8001862 <xTaskGenericCreate+0x6e>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	69b8      	ldr	r0, [r7, #24]
 800186a:	68b9      	ldr	r1, [r7, #8]
 800186c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800186e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001870:	f000 fbd0 	bl	8002014 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001874:	6978      	ldr	r0, [r7, #20]
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	f001 f961 	bl	8002b40 <pxPortInitialiseStack>
 800187e:	4602      	mov	r2, r0
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8001890:	f001 f9c6 	bl	8002c20 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001894:	4b33      	ldr	r3, [pc, #204]	; (8001964 <xTaskGenericCreate+0x170>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <xTaskGenericCreate+0x170>)
 800189c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <xTaskGenericCreate+0x174>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <xTaskGenericCreate+0x174>)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <xTaskGenericCreate+0x170>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d10f      	bne.n	80018d4 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80018b4:	f000 fbe4 	bl	8002080 <prvInitialiseTaskLists>
 80018b8:	e00c      	b.n	80018d4 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80018ba:	4b2c      	ldr	r3, [pc, #176]	; (800196c <xTaskGenericCreate+0x178>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <xTaskGenericCreate+0x174>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d802      	bhi.n	80018d4 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <xTaskGenericCreate+0x174>)
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <xTaskGenericCreate+0x17c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d903      	bls.n	80018e8 <xTaskGenericCreate+0xf4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <xTaskGenericCreate+0x17c>)
 80018e6:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTCBNumber;
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <xTaskGenericCreate+0x180>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTCBNumber++;
 80018f0:	4b20      	ldr	r3, [pc, #128]	; (8001974 <xTaskGenericCreate+0x180>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <xTaskGenericCreate+0x180>)
 80018f8:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <xTaskGenericCreate+0x184>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d903      	bls.n	800190e <xTaskGenericCreate+0x11a>
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <xTaskGenericCreate+0x184>)
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <xTaskGenericCreate+0x188>)
 800191c:	441a      	add	r2, r3
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	3304      	adds	r3, #4
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f001 fa2d 	bl	8002d84 <vListInsertEnd>

			xReturn = pdPASS;
 800192a:	2301      	movs	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800192e:	f001 f989 	bl	8002c44 <vPortExitCritical>
 8001932:	e002      	b.n	800193a <xTaskGenericCreate+0x146>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10b      	bne.n	8001958 <xTaskGenericCreate+0x164>
	{
		if( xSchedulerRunning != pdFALSE )
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <xTaskGenericCreate+0x178>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <xTaskGenericCreate+0x164>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <xTaskGenericCreate+0x174>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001950:	429a      	cmp	r2, r3
 8001952:	d201      	bcs.n	8001958 <xTaskGenericCreate+0x164>
			{
				portYIELD_WITHIN_API();
 8001954:	f001 f958 	bl	8002c08 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8001958:	69fb      	ldr	r3, [r7, #28]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000178 	.word	0x20000178
 8001968:	200000a0 	.word	0x200000a0
 800196c:	20000188 	.word	0x20000188
 8001970:	20000180 	.word	0x20000180
 8001974:	2000019c 	.word	0x2000019c
 8001978:	20000184 	.word	0x20000184
 800197c:	200000a4 	.word	0x200000a4

08001980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d012      	beq.n	80019b8 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 8001992:	f000 f857 	bl	8001a44 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <vTaskDelay+0x48>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <vTaskDelay+0x4c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3304      	adds	r3, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 fa4c 	bl	8002e44 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80019ac:	68b8      	ldr	r0, [r7, #8]
 80019ae:	f000 fbdf 	bl	8002170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80019b2:	f000 f855 	bl	8001a60 <xTaskResumeAll>
 80019b6:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 80019be:	f001 f923 	bl	8002c08 <vPortYieldFromISR>
		}
	}
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000017c 	.word	0x2000017c
 80019cc:	200000a0 	.word	0x200000a0

080019d0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 80019d6:	2300      	movs	r3, #0
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2300      	movs	r3, #0
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	2300      	movs	r3, #0
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9303      	str	r3, [sp, #12]
 80019e6:	4813      	ldr	r0, [pc, #76]	; (8001a34 <vTaskStartScheduler+0x64>)
 80019e8:	4913      	ldr	r1, [pc, #76]	; (8001a38 <vTaskStartScheduler+0x68>)
 80019ea:	2282      	movs	r2, #130	; 0x82
 80019ec:	2300      	movs	r3, #0
 80019ee:	f7ff ff01 	bl	80017f4 <xTaskGenericCreate>
 80019f2:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 80019fa:	f7ff fc77 	bl	80012ec <xTimerCreateTimerTask>
 80019fe:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10b      	bne.n	8001a1e <vTaskStartScheduler+0x4e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8001a06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a0a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <vTaskStartScheduler+0x6c>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <vTaskStartScheduler+0x70>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001a1a:	f001 f8d9 	bl	8002bd0 <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d104      	bne.n	8001a2e <vTaskStartScheduler+0x5e>
 8001a24:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a28:	f380 8811 	msr	BASEPRI, r0
 8001a2c:	e7fe      	b.n	8001a2c <vTaskStartScheduler+0x5c>
}
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	08001ff1 	.word	0x08001ff1
 8001a38:	080032c4 	.word	0x080032c4
 8001a3c:	20000188 	.word	0x20000188
 8001a40:	2000017c 	.word	0x2000017c

08001a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <vTaskSuspendAll+0x18>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <vTaskSuspendAll+0x18>)
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2000018c 	.word	0x2000018c

08001a60 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <xTaskResumeAll+0xe8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d104      	bne.n	8001a7c <xTaskResumeAll+0x1c>
 8001a72:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a76:	f380 8811 	msr	BASEPRI, r0
 8001a7a:	e7fe      	b.n	8001a7a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001a7c:	f001 f8d0 	bl	8002c20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <xTaskResumeAll+0xe8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <xTaskResumeAll+0xe8>)
 8001a88:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <xTaskResumeAll+0xe8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d152      	bne.n	8001b38 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8001a92:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <xTaskResumeAll+0xec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d04e      	beq.n	8001b38 <xTaskResumeAll+0xd8>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8001a9e:	e027      	b.n	8001af0 <xTaskResumeAll+0x90>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <xTaskResumeAll+0xf0>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8001aa6:	f104 0318 	add.w	r3, r4, #24
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 f9ca 	bl	8002e44 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001ab0:	1d23      	adds	r3, r4, #4
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 f9c6 	bl	8002e44 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8001ab8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <xTaskResumeAll+0xf4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d902      	bls.n	8001ac8 <xTaskResumeAll+0x68>
 8001ac2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <xTaskResumeAll+0xf4>)
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <xTaskResumeAll+0xf8>)
 8001ad4:	441a      	add	r2, r3
 8001ad6:	1d23      	adds	r3, r4, #4
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f001 f952 	bl	8002d84 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ae0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <xTaskResumeAll+0xfc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d301      	bcc.n	8001af0 <xTaskResumeAll+0x90>
					{
						xYieldRequired = pdTRUE;
 8001aec:	2301      	movs	r3, #1
 8001aee:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <xTaskResumeAll+0xf0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1d3      	bne.n	8001aa0 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <xTaskResumeAll+0x100>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00d      	beq.n	8001b1c <xTaskResumeAll+0xbc>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001b00:	e006      	b.n	8001b10 <xTaskResumeAll+0xb0>
					{
						vTaskIncrementTick();
 8001b02:	f000 f843 	bl	8001b8c <vTaskIncrementTick>
						--uxMissedTicks;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <xTaskResumeAll+0x100>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <xTaskResumeAll+0x100>)
 8001b0e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <xTaskResumeAll+0x100>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f4      	bne.n	8001b02 <xTaskResumeAll+0xa2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d003      	beq.n	8001b2a <xTaskResumeAll+0xca>
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <xTaskResumeAll+0x104>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d106      	bne.n	8001b38 <xTaskResumeAll+0xd8>
				{
					xAlreadyYielded = pdTRUE;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <xTaskResumeAll+0x104>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8001b34:	f001 f868 	bl	8002c08 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8001b38:	f001 f884 	bl	8002c44 <vPortExitCritical>

	return xAlreadyYielded;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000018c 	.word	0x2000018c
 8001b4c:	20000178 	.word	0x20000178
 8001b50:	20000138 	.word	0x20000138
 8001b54:	20000184 	.word	0x20000184
 8001b58:	200000a4 	.word	0x200000a4
 8001b5c:	200000a0 	.word	0x200000a0
 8001b60:	20000190 	.word	0x20000190
 8001b64:	20000194 	.word	0x20000194

08001b68 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8001b6e:	f001 f857 	bl	8002c20 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <xTaskGetTickCount+0x20>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8001b78:	f001 f864 	bl	8002c44 <vPortExitCritical>

	return xTicks;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000017c 	.word	0x2000017c

08001b8c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001b92:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <vTaskIncrementTick+0x12c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d17d      	bne.n	8001c96 <vTaskIncrementTick+0x10a>
	{
		++xTickCount;
 8001b9a:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <vTaskIncrementTick+0x130>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <vTaskIncrementTick+0x130>)
 8001ba2:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8001ba4:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <vTaskIncrementTick+0x130>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d12b      	bne.n	8001c04 <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <vTaskIncrementTick+0x134>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <vTaskIncrementTick+0x34>
 8001bb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001bba:	f380 8811 	msr	BASEPRI, r0
 8001bbe:	e7fe      	b.n	8001bbe <vTaskIncrementTick+0x32>
			
			pxTemp = pxDelayedTaskList;
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <vTaskIncrementTick+0x134>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <vTaskIncrementTick+0x138>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <vTaskIncrementTick+0x134>)
 8001bcc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <vTaskIncrementTick+0x138>)
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8001bd4:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <vTaskIncrementTick+0x13c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <vTaskIncrementTick+0x13c>)
 8001bdc:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bde:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <vTaskIncrementTick+0x134>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d104      	bne.n	8001bf2 <vTaskIncrementTick+0x66>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8001be8:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <vTaskIncrementTick+0x140>)
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e008      	b.n	8001c04 <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bf2:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <vTaskIncrementTick+0x134>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <vTaskIncrementTick+0x140>)
 8001c02:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <vTaskIncrementTick+0x130>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <vTaskIncrementTick+0x140>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d341      	bcc.n	8001c94 <vTaskIncrementTick+0x108>
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <vTaskIncrementTick+0x134>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d104      	bne.n	8001c24 <vTaskIncrementTick+0x98>
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <vTaskIncrementTick+0x140>)
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e037      	b.n	8001c94 <vTaskIncrementTick+0x108>
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <vTaskIncrementTick+0x134>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <vTaskIncrementTick+0x130>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d203      	bcs.n	8001c46 <vTaskIncrementTick+0xba>
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <vTaskIncrementTick+0x140>)
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e026      	b.n	8001c94 <vTaskIncrementTick+0x108>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 f8fa 	bl	8002e44 <vListRemove>
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <vTaskIncrementTick+0xd6>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3318      	adds	r3, #24
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 f8f1 	bl	8002e44 <vListRemove>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <vTaskIncrementTick+0x144>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d903      	bls.n	8001c76 <vTaskIncrementTick+0xea>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <vTaskIncrementTick+0x144>)
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <vTaskIncrementTick+0x148>)
 8001c84:	441a      	add	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f001 f879 	bl	8002d84 <vListInsertEnd>
 8001c92:	e7bd      	b.n	8001c10 <vTaskIncrementTick+0x84>
 8001c94:	e006      	b.n	8001ca4 <vTaskIncrementTick+0x118>
	}
	else
	{
		++uxMissedTicks;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <vTaskIncrementTick+0x14c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <vTaskIncrementTick+0x14c>)
 8001c9e:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8001ca0:	f7fe fb98 	bl	80003d4 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <vTaskIncrementTick+0x14c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <vTaskIncrementTick+0x124>
		{
			vApplicationTickHook();
 8001cac:	f7fe fb92 	bl	80003d4 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000018c 	.word	0x2000018c
 8001cbc:	2000017c 	.word	0x2000017c
 8001cc0:	20000130 	.word	0x20000130
 8001cc4:	20000134 	.word	0x20000134
 8001cc8:	20000198 	.word	0x20000198
 8001ccc:	20000004 	.word	0x20000004
 8001cd0:	20000184 	.word	0x20000184
 8001cd4:	200000a4 	.word	0x200000a4
 8001cd8:	20000190 	.word	0x20000190

08001cdc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <vTaskSwitchContext+0x90>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <vTaskSwitchContext+0x94>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e037      	b.n	8001d62 <vTaskSwitchContext+0x86>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001cf2:	e00d      	b.n	8001d10 <vTaskSwitchContext+0x34>
		{
			configASSERT( uxTopReadyPriority );
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <vTaskSwitchContext+0x98>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d104      	bne.n	8001d06 <vTaskSwitchContext+0x2a>
 8001cfc:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d00:	f380 8811 	msr	BASEPRI, r0
 8001d04:	e7fe      	b.n	8001d04 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <vTaskSwitchContext+0x98>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <vTaskSwitchContext+0x98>)
 8001d0e:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <vTaskSwitchContext+0x98>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4918      	ldr	r1, [pc, #96]	; (8001d78 <vTaskSwitchContext+0x9c>)
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0e6      	beq.n	8001cf4 <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <vTaskSwitchContext+0x98>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4a11      	ldr	r2, [pc, #68]	; (8001d78 <vTaskSwitchContext+0x9c>)
 8001d34:	4413      	add	r3, r2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3308      	adds	r3, #8
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d104      	bne.n	8001d58 <vTaskSwitchContext+0x7c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <vTaskSwitchContext+0xa0>)
 8001d60:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	2000018c 	.word	0x2000018c
 8001d70:	20000194 	.word	0x20000194
 8001d74:	20000184 	.word	0x20000184
 8001d78:	200000a4 	.word	0x200000a4
 8001d7c:	200000a0 	.word	0x200000a0

08001d80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d104      	bne.n	8001d9a <vTaskPlaceOnEventList+0x1a>
 8001d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d94:	f380 8811 	msr	BASEPRI, r0
 8001d98:	e7fe      	b.n	8001d98 <vTaskPlaceOnEventList+0x18>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <vTaskPlaceOnEventList+0x64>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3318      	adds	r3, #24
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4619      	mov	r1, r3
 8001da4:	f001 f816 	bl	8002dd4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <vTaskPlaceOnEventList+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 f848 	bl	8002e44 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dba:	d107      	bne.n	8001dcc <vTaskPlaceOnEventList+0x4c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <vTaskPlaceOnEventList+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	4809      	ldr	r0, [pc, #36]	; (8001de8 <vTaskPlaceOnEventList+0x68>)
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f000 ffdd 	bl	8002d84 <vListInsertEnd>
 8001dca:	e007      	b.n	8001ddc <vTaskPlaceOnEventList+0x5c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <vTaskPlaceOnEventList+0x6c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f9ca 	bl	8002170 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200000a0 	.word	0x200000a0
 8001de8:	20000164 	.word	0x20000164
 8001dec:	2000017c 	.word	0x2000017c

08001df0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d104      	bne.n	8001e0a <vTaskPlaceOnEventListRestricted+0x1a>
 8001e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e04:	f380 8811 	msr	BASEPRI, r0
 8001e08:	e7fe      	b.n	8001e08 <vTaskPlaceOnEventListRestricted+0x18>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <vTaskPlaceOnEventListRestricted+0x4c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4619      	mov	r1, r3
 8001e14:	f000 ffb6 	bl	8002d84 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <vTaskPlaceOnEventListRestricted+0x4c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 f810 	bl	8002e44 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <vTaskPlaceOnEventListRestricted+0x50>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f99e 	bl	8002170 <prvAddCurrentTaskToDelayedList>
	}
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200000a0 	.word	0x200000a0
 8001e40:	2000017c 	.word	0x2000017c

08001e44 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d104      	bne.n	8001e64 <xTaskRemoveFromEventList+0x20>
 8001e5a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e5e:	f380 8811 	msr	BASEPRI, r0
 8001e62:	e7fe      	b.n	8001e62 <xTaskRemoveFromEventList+0x1e>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	3318      	adds	r3, #24
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 ffeb 	bl	8002e44 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <xTaskRemoveFromEventList+0x9c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d11d      	bne.n	8001eb2 <xTaskRemoveFromEventList+0x6e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 ffe2 	bl	8002e44 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <xTaskRemoveFromEventList+0xa0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d903      	bls.n	8001e94 <xTaskRemoveFromEventList+0x50>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <xTaskRemoveFromEventList+0xa0>)
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <xTaskRemoveFromEventList+0xa4>)
 8001ea2:	441a      	add	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f000 ff6a 	bl	8002d84 <vListInsertEnd>
 8001eb0:	e005      	b.n	8001ebe <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3318      	adds	r3, #24
 8001eb6:	480d      	ldr	r0, [pc, #52]	; (8001eec <xTaskRemoveFromEventList+0xa8>)
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f000 ff63 	bl	8002d84 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <xTaskRemoveFromEventList+0xac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d302      	bcc.n	8001ed2 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e001      	b.n	8001ed6 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000018c 	.word	0x2000018c
 8001ee4:	20000184 	.word	0x20000184
 8001ee8:	200000a4 	.word	0x200000a4
 8001eec:	20000138 	.word	0x20000138
 8001ef0:	200000a0 	.word	0x200000a0

08001ef4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <vTaskSetTimeOutState+0x18>
 8001f02:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f06:	f380 8811 	msr	BASEPRI, r0
 8001f0a:	e7fe      	b.n	8001f0a <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <vTaskSetTimeOutState+0x34>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <vTaskSetTimeOutState+0x38>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	605a      	str	r2, [r3, #4]
}
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000198 	.word	0x20000198
 8001f2c:	2000017c 	.word	0x2000017c

08001f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d104      	bne.n	8001f4a <xTaskCheckForTimeOut+0x1a>
 8001f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f44:	f380 8811 	msr	BASEPRI, r0
 8001f48:	e7fe      	b.n	8001f48 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <xTaskCheckForTimeOut+0x2a>
 8001f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f54:	f380 8811 	msr	BASEPRI, r0
 8001f58:	e7fe      	b.n	8001f58 <xTaskCheckForTimeOut+0x28>

	taskENTER_CRITICAL();
 8001f5a:	f000 fe61 	bl	8002c20 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f66:	d102      	bne.n	8001f6e <xTaskCheckForTimeOut+0x3e>
			{
				xReturn = pdFALSE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e029      	b.n	8001fc2 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <xTaskCheckForTimeOut+0xa0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d008      	beq.n	8001f8c <xTaskCheckForTimeOut+0x5c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <xTaskCheckForTimeOut+0xa4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d802      	bhi.n	8001f8c <xTaskCheckForTimeOut+0x5c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	e01a      	b.n	8001fc2 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <xTaskCheckForTimeOut+0xa4>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	1ad2      	subs	r2, r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d20f      	bcs.n	8001fbe <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6859      	ldr	r1, [r3, #4]
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <xTaskCheckForTimeOut+0xa4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	1acb      	subs	r3, r1, r3
 8001fac:	441a      	add	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff9e 	bl	8001ef4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e001      	b.n	8001fc2 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001fc2:	f000 fe3f 	bl	8002c44 <vPortExitCritical>

	return xReturn;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000198 	.word	0x20000198
 8001fd4:	2000017c 	.word	0x2000017c

08001fd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <vTaskMissedYield+0x14>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000194 	.word	0x20000194

08001ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8001ff8:	f000 f880 	bl	80020fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <prvIdleTask+0x20>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d901      	bls.n	8002008 <prvIdleTask+0x18>
			{
				taskYIELD();
 8002004:	f000 fe00 	bl	8002c08 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002008:	f7fe f9f6 	bl	80003f8 <vApplicationIdleHook>
		}
		#endif
	}
 800200c:	e7f4      	b.n	8001ff8 <prvIdleTask+0x8>
 800200e:	bf00      	nop
 8002010:	200000a4 	.word	0x200000a4

08002014 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3334      	adds	r3, #52	; 0x34
 8002026:	4618      	mov	r0, r3
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	220a      	movs	r2, #10
 800202c:	f001 f91f 	bl	800326e <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d901      	bls.n	8002042 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 800203e:	2304      	movs	r3, #4
 8002040:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3304      	adds	r3, #4
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fe8a 	bl	8002d6c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3318      	adds	r3, #24
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fe85 	bl	8002d6c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1c3 0205 	rsb	r2, r3, #5
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop

08002080 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	e00c      	b.n	80020a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <prvInitialiseTaskLists+0x5c>)
 8002098:	4413      	add	r3, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fe46 	bl	8002d2c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3301      	adds	r3, #1
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d9ef      	bls.n	800208c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <prvInitialiseTaskLists+0x60>)
 80020ae:	f000 fe3d 	bl	8002d2c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80020b2:	480c      	ldr	r0, [pc, #48]	; (80020e4 <prvInitialiseTaskLists+0x64>)
 80020b4:	f000 fe3a 	bl	8002d2c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <prvInitialiseTaskLists+0x68>)
 80020ba:	f000 fe37 	bl	8002d2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 80020be:	480b      	ldr	r0, [pc, #44]	; (80020ec <prvInitialiseTaskLists+0x6c>)
 80020c0:	f000 fe34 	bl	8002d2c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 80020c4:	480a      	ldr	r0, [pc, #40]	; (80020f0 <prvInitialiseTaskLists+0x70>)
 80020c6:	f000 fe31 	bl	8002d2c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <prvInitialiseTaskLists+0x74>)
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <prvInitialiseTaskLists+0x60>)
 80020ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <prvInitialiseTaskLists+0x78>)
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <prvInitialiseTaskLists+0x64>)
 80020d4:	601a      	str	r2, [r3, #0]
}
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200000a4 	.word	0x200000a4
 80020e0:	20000108 	.word	0x20000108
 80020e4:	2000011c 	.word	0x2000011c
 80020e8:	20000138 	.word	0x20000138
 80020ec:	2000014c 	.word	0x2000014c
 80020f0:	20000164 	.word	0x20000164
 80020f4:	20000130 	.word	0x20000130
 80020f8:	20000134 	.word	0x20000134

080020fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <prvCheckTasksWaitingTermination+0x68>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d028      	beq.n	800215c <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
 800210a:	f7ff fc9b 	bl	8001a44 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <prvCheckTasksWaitingTermination+0x6c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2300      	movne	r3, #0
 8002118:	2301      	moveq	r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 800211e:	f7ff fc9f 	bl	8001a60 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d119      	bne.n	800215c <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8002128:	f000 fd7a 	bl	8002c20 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <prvCheckTasksWaitingTermination+0x6c>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	3304      	adds	r3, #4
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fe83 	bl	8002e44 <vListRemove>
					--uxCurrentNumberOfTasks;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <prvCheckTasksWaitingTermination+0x70>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	1e5a      	subs	r2, r3, #1
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <prvCheckTasksWaitingTermination+0x70>)
 8002146:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <prvCheckTasksWaitingTermination+0x68>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <prvCheckTasksWaitingTermination+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002152:	f000 fd77 	bl	8002c44 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002156:	6838      	ldr	r0, [r7, #0]
 8002158:	f000 f872 	bl	8002240 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000160 	.word	0x20000160
 8002168:	2000014c 	.word	0x2000014c
 800216c:	20000178 	.word	0x20000178

08002170 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <prvAddCurrentTaskToDelayedList+0x58>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <prvAddCurrentTaskToDelayedList+0x5c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d209      	bcs.n	800219e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <prvAddCurrentTaskToDelayedList+0x60>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <prvAddCurrentTaskToDelayedList+0x58>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3304      	adds	r3, #4
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f000 fe1c 	bl	8002dd4 <vListInsert>
 800219c:	e010      	b.n	80021c0 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <prvAddCurrentTaskToDelayedList+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <prvAddCurrentTaskToDelayedList+0x58>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3304      	adds	r3, #4
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f000 fe12 	bl	8002dd4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <prvAddCurrentTaskToDelayedList+0x68>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d202      	bcs.n	80021c0 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <prvAddCurrentTaskToDelayedList+0x68>)
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
		}
	}
}
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200000a0 	.word	0x200000a0
 80021cc:	2000017c 	.word	0x2000017c
 80021d0:	20000134 	.word	0x20000134
 80021d4:	20000130 	.word	0x20000130
 80021d8:	20000004 	.word	0x20000004

080021dc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80021e8:	204c      	movs	r0, #76	; 0x4c
 80021ea:	f000 fc63 	bl	8002ab4 <pvPortMalloc>
 80021ee:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d01f      	beq.n	8002236 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <prvAllocateTCBAndStack+0x2e>
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fc57 	bl	8002ab4 <pvPortMalloc>
 8002206:	4603      	mov	r3, r0
 8002208:	e000      	b.n	800220c <prvAllocateTCBAndStack+0x30>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d105      	bne.n	8002224 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fc87 	bl	8002b2c <vPortFree>
			pxNewTCB = NULL;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e008      	b.n	8002236 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4610      	mov	r0, r2
 800222e:	21a5      	movs	r1, #165	; 0xa5
 8002230:	461a      	mov	r2, r3
 8002232:	f001 f814 	bl	800325e <memset>
		}
	}

	return pxNewTCB;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fc6d 	bl	8002b2c <vPortFree>
		vPortFree( pxTCB );
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fc6a 	bl	8002b2c <vPortFree>
	}
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop

08002260 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <xTaskGetCurrentTaskHandle+0x1c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800226c:	687b      	ldr	r3, [r7, #4]
	}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200000a0 	.word	0x200000a0

08002280 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <xTaskGetSchedulerState+0x34>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	e008      	b.n	80022a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <xTaskGetSchedulerState+0x38>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800229c:	2301      	movs	r3, #1
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	e001      	b.n	80022a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80022a2:	2302      	movs	r3, #2
 80022a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80022a6:	687b      	ldr	r3, [r7, #4]
	}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	20000188 	.word	0x20000188
 80022b8:	2000018c 	.word	0x2000018c

080022bc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <vTaskPriorityInherit+0x1c>
 80022ce:	f04f 0050 	mov.w	r0, #80	; 0x50
 80022d2:	f380 8811 	msr	BASEPRI, r0
 80022d6:	e7fe      	b.n	80022d6 <vTaskPriorityInherit+0x1a>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022dc:	4b21      	ldr	r3, [pc, #132]	; (8002364 <vTaskPriorityInherit+0xa8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d23a      	bcs.n	800235c <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 80022e6:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <vTaskPriorityInherit+0xa8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	f1c3 0205 	rsb	r2, r3, #5
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6959      	ldr	r1, [r3, #20]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4a18      	ldr	r2, [pc, #96]	; (8002368 <vTaskPriorityInherit+0xac>)
 8002306:	4413      	add	r3, r2
 8002308:	4299      	cmp	r1, r3
 800230a:	d122      	bne.n	8002352 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3304      	adds	r3, #4
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fd97 	bl	8002e44 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <vTaskPriorityInherit+0xa8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <vTaskPriorityInherit+0xb0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d903      	bls.n	8002334 <vTaskPriorityInherit+0x78>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <vTaskPriorityInherit+0xb0>)
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4a09      	ldr	r2, [pc, #36]	; (8002368 <vTaskPriorityInherit+0xac>)
 8002342:	441a      	add	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3304      	adds	r3, #4
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f000 fd1a 	bl	8002d84 <vListInsertEnd>
 8002350:	e004      	b.n	800235c <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <vTaskPriorityInherit+0xa8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200000a0 	.word	0x200000a0
 8002368:	200000a4 	.word	0x200000a4
 800236c:	20000184 	.word	0x20000184

08002370 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d02c      	beq.n	80023dc <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238a:	429a      	cmp	r2, r3
 800238c:	d026      	beq.n	80023dc <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3304      	adds	r3, #4
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fd56 	bl	8002e44 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	f1c3 0205 	rsb	r2, r3, #5
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <vTaskPriorityDisinherit+0x74>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d903      	bls.n	80023c0 <vTaskPriorityDisinherit+0x50>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <vTaskPriorityDisinherit+0x74>)
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <vTaskPriorityDisinherit+0x78>)
 80023ce:	441a      	add	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3304      	adds	r3, #4
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f000 fcd4 	bl	8002d84 <vListInsertEnd>
			}
		}
	}
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000184 	.word	0x20000184
 80023e8:	200000a4 	.word	0x200000a4

080023ec <xQueueGenericCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should 
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d052      	beq.n	80024aa <xQueueGenericCreate+0xbe>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8002404:	2050      	movs	r0, #80	; 0x50
 8002406:	f000 fb55 	bl	8002ab4 <pvPortMalloc>
 800240a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04b      	beq.n	80024aa <xQueueGenericCreate+0xbe>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f000 fb48 	bl	8002ab4 <pvPortMalloc>
 8002424:	4602      	mov	r2, r0
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d038      	beq.n	80024a4 <xQueueGenericCreate+0xb8>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	441a      	add	r2, r3
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2200      	movs	r2, #0
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3b01      	subs	r3, #1
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	441a      	add	r2, r3
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f04f 32ff 	mov.w	r2, #4294967295
 8002480:	649a      	str	r2, [r3, #72]	; 0x48
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	79fa      	ldrb	r2, [r7, #7]
 8002486:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	3310      	adds	r3, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fc4c 	bl	8002d2c <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	3324      	adds	r3, #36	; 0x24
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fc47 	bl	8002d2c <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e002      	b.n	80024aa <xQueueGenericCreate+0xbe>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 80024a4:	69b8      	ldr	r0, [r7, #24]
 80024a6:	f000 fb41 	bl	8002b2c <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d104      	bne.n	80024ba <xQueueGenericCreate+0xce>
 80024b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80024b4:	f380 8811 	msr	BASEPRI, r0
 80024b8:	e7fe      	b.n	80024b8 <xQueueGenericCreate+0xcc>

	return xReturn;
 80024ba:	69fb      	ldr	r3, [r7, #28]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d104      	bne.n	80024e6 <xQueueGenericSend+0x22>
 80024dc:	f04f 0050 	mov.w	r0, #80	; 0x50
 80024e0:	f380 8811 	msr	BASEPRI, r0
 80024e4:	e7fe      	b.n	80024e4 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <xQueueGenericSend+0x30>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <xQueueGenericSend+0x34>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <xQueueGenericSend+0x36>
 80024f8:	2300      	movs	r3, #0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d104      	bne.n	8002508 <xQueueGenericSend+0x44>
 80024fe:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002502:	f380 8811 	msr	BASEPRI, r0
 8002506:	e7fe      	b.n	8002506 <xQueueGenericSend+0x42>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002508:	f000 fb8a 	bl	8002c20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	429a      	cmp	r2, r3
 8002516:	d216      	bcs.n	8002546 <xQueueGenericSend+0x82>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	f000 f9a3 	bl	8002868 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <xQueueGenericSend+0x7a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3324      	adds	r3, #36	; 0x24
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fc88 	bl	8001e44 <xTaskRemoveFromEventList>
 8002534:	4603      	mov	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <xQueueGenericSend+0x7a>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 800253a:	f000 fb65 	bl	8002c08 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 800253e:	f000 fb81 	bl	8002c44 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8002542:	2301      	movs	r3, #1
 8002544:	e059      	b.n	80025fa <xQueueGenericSend+0x136>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <xQueueGenericSend+0x90>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800254c:	f000 fb7a 	bl	8002c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002550:	2300      	movs	r3, #0
 8002552:	e052      	b.n	80025fa <xQueueGenericSend+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fcc8 	bl	8001ef4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002564:	2301      	movs	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8002568:	f000 fb6c 	bl	8002c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800256c:	f7ff fa6a 	bl	8001a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002570:	f000 fb56 	bl	8002c20 <vPortEnterCritical>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d102      	bne.n	8002584 <xQueueGenericSend+0xc0>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d102      	bne.n	8002594 <xQueueGenericSend+0xd0>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	649a      	str	r2, [r3, #72]	; 0x48
 8002594:	f000 fb56 	bl	8002c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002598:	f107 0214 	add.w	r2, r7, #20
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7ff fcc5 	bl	8001f30 <xTaskCheckForTimeOut>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d11e      	bne.n	80025ea <xQueueGenericSend+0x126>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fa3f 	bl	8002a30 <prvIsQueueFull>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d012      	beq.n	80025de <xQueueGenericSend+0x11a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f103 0210 	add.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7ff fbdc 	bl	8001d80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f9cf 	bl	800296c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025ce:	f7ff fa47 	bl	8001a60 <xTaskResumeAll>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10f      	bne.n	80025f8 <xQueueGenericSend+0x134>
				{
					portYIELD_WITHIN_API();
 80025d8:	f000 fb16 	bl	8002c08 <vPortYieldFromISR>
 80025dc:	e00c      	b.n	80025f8 <xQueueGenericSend+0x134>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f9c4 	bl	800296c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025e4:	f7ff fa3c 	bl	8001a60 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80025e8:	e78e      	b.n	8002508 <xQueueGenericSend+0x44>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f9be 	bl	800296c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025f0:	f7ff fa36 	bl	8001a60 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <xQueueGenericSend+0x136>
		}
	}
 80025f8:	e786      	b.n	8002508 <xQueueGenericSend+0x44>
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop

08002604 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <xQueueGenericSendFromISR+0x1e>
 8002618:	f04f 0050 	mov.w	r0, #80	; 0x50
 800261c:	f380 8811 	msr	BASEPRI, r0
 8002620:	e7fe      	b.n	8002620 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxHigherPriorityTaskWoken );
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <xQueueGenericSendFromISR+0x2e>
 8002628:	f04f 0050 	mov.w	r0, #80	; 0x50
 800262c:	f380 8811 	msr	BASEPRI, r0
 8002630:	e7fe      	b.n	8002630 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <xQueueGenericSendFromISR+0x3c>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <xQueueGenericSendFromISR+0x40>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <xQueueGenericSendFromISR+0x42>
 8002644:	2300      	movs	r3, #0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <xQueueGenericSendFromISR+0x50>
 800264a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800264e:	f380 8811 	msr	BASEPRI, r0
 8002652:	e7fe      	b.n	8002652 <xQueueGenericSendFromISR+0x4e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	f04f 0050 	mov.w	r0, #80	; 0x50
 800265c:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	429a      	cmp	r2, r3
 800266a:	d221      	bcs.n	80026b0 <xQueueGenericSendFromISR+0xac>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	f000 f8f9 	bl	8002868 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d10f      	bne.n	80026a0 <xQueueGenericSendFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d010      	beq.n	80026aa <xQueueGenericSendFromISR+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3324      	adds	r3, #36	; 0x24
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fbd9 	bl	8001e44 <xTaskRemoveFromEventList>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <xQueueGenericSendFromISR+0xa6>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e004      	b.n	80026aa <xQueueGenericSendFromISR+0xa6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80026aa:	2301      	movs	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e001      	b.n	80026b4 <xQueueGenericSendFromISR+0xb0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 80026bc:	697b      	ldr	r3, [r7, #20]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop

080026c8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <xQueueGenericReceive+0x22>
 80026e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80026e4:	f380 8811 	msr	BASEPRI, r0
 80026e8:	e7fe      	b.n	80026e8 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <xQueueGenericReceive+0x30>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <xQueueGenericReceive+0x34>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <xQueueGenericReceive+0x36>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d104      	bne.n	800270c <xQueueGenericReceive+0x44>
 8002702:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002706:	f380 8811 	msr	BASEPRI, r0
 800270a:	e7fe      	b.n	800270a <xQueueGenericReceive+0x42>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800270c:	f000 fa88 	bl	8002c20 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	2b00      	cmp	r3, #0
 8002716:	d03b      	beq.n	8002790 <xQueueGenericReceive+0xc8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	f000 f8fd 	bl	8002920 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d11c      	bne.n	8002766 <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <xQueueGenericReceive+0x80>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 800273e:	f7ff fd8f 	bl	8002260 <xTaskGetCurrentTaskHandle>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01b      	beq.n	8002788 <xQueueGenericReceive+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3310      	adds	r3, #16
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fb75 	bl	8001e44 <xTaskRemoveFromEventList>
 800275a:	4603      	mov	r3, r0
 800275c:	2b01      	cmp	r3, #1
 800275e:	d113      	bne.n	8002788 <xQueueGenericReceive+0xc0>
						{
							portYIELD_WITHIN_API();
 8002760:	f000 fa52 	bl	8002c08 <vPortYieldFromISR>
 8002764:	e010      	b.n	8002788 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <xQueueGenericReceive+0xc0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3324      	adds	r3, #36	; 0x24
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fb63 	bl	8001e44 <xTaskRemoveFromEventList>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <xQueueGenericReceive+0xc0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8002784:	f000 fa40 	bl	8002c08 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 8002788:	f000 fa5c 	bl	8002c44 <vPortExitCritical>
				return pdPASS;
 800278c:	2301      	movs	r3, #1
 800278e:	e066      	b.n	800285e <xQueueGenericReceive+0x196>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002796:	f000 fa55 	bl	8002c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800279a:	2300      	movs	r3, #0
 800279c:	e05f      	b.n	800285e <xQueueGenericReceive+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d106      	bne.n	80027b2 <xQueueGenericReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fba3 	bl	8001ef4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 80027b2:	f000 fa47 	bl	8002c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027b6:	f7ff f945 	bl	8001a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027ba:	f000 fa31 	bl	8002c20 <vPortEnterCritical>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d102      	bne.n	80027ce <xQueueGenericReceive+0x106>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d102      	bne.n	80027de <xQueueGenericReceive+0x116>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	649a      	str	r2, [r3, #72]	; 0x48
 80027de:	f000 fa31 	bl	8002c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027e2:	f107 0210 	add.w	r2, r7, #16
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f7ff fba0 	bl	8001f30 <xTaskCheckForTimeOut>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12b      	bne.n	800284e <xQueueGenericReceive+0x186>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f904 	bl	8002a04 <prvIsQueueEmpty>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01f      	beq.n	8002842 <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <xQueueGenericReceive+0x154>
					{
						portENTER_CRITICAL();
 800280a:	f000 fa09 	bl	8002c20 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fd52 	bl	80022bc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8002818:	f000 fa14 	bl	8002c44 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7ff faaa 	bl	8001d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f89d 	bl	800296c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002832:	f7ff f915 	bl	8001a60 <xTaskResumeAll>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10f      	bne.n	800285c <xQueueGenericReceive+0x194>
				{
					portYIELD_WITHIN_API();
 800283c:	f000 f9e4 	bl	8002c08 <vPortYieldFromISR>
 8002840:	e00c      	b.n	800285c <xQueueGenericReceive+0x194>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f892 	bl	800296c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002848:	f7ff f90a 	bl	8001a60 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800284c:	e75e      	b.n	800270c <xQueueGenericReceive+0x44>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f88c 	bl	800296c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002854:	f7ff f904 	bl	8001a60 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <xQueueGenericReceive+0x196>
		}
	}
 800285c:	e756      	b.n	800270c <xQueueGenericReceive+0x44>
}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop

08002868 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10c      	bne.n	8002896 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d145      	bne.n	8002910 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fd71 	bl	8002370 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	e03c      	b.n	8002910 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d11a      	bne.n	80028d2 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	4610      	mov	r0, r2
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f000 fccf 	bl	800324c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	441a      	add	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d323      	bcc.n	8002910 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e01e      	b.n	8002910 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4610      	mov	r0, r2
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	461a      	mov	r2, r3
 80028e0:	f000 fcb4 	bl	800324c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	425b      	negs	r3, r3
 80028ee:	441a      	add	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d207      	bcs.n	8002910 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	425b      	negs	r3, r3
 800290a:	441a      	add	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
}
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d019      	beq.n	8002966 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	441a      	add	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	d303      	bcc.n	8002954 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	6838      	ldr	r0, [r7, #0]
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	f000 fc73 	bl	800324c <memcpy>
	}
}
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002974:	f000 f954 	bl	8002c20 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002978:	e014      	b.n	80029a4 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00f      	beq.n	80029a2 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3324      	adds	r3, #36	; 0x24
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fa5c 	bl	8001e44 <xTaskRemoveFromEventList>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8002992:	f7ff fb21 	bl	8001fd8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299a:	1e5a      	subs	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	649a      	str	r2, [r3, #72]	; 0x48
 80029a0:	e000      	b.n	80029a4 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
 80029a2:	e003      	b.n	80029ac <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	dce6      	bgt.n	800297a <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f04f 32ff 	mov.w	r2, #4294967295
 80029b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80029b4:	f000 f946 	bl	8002c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029b8:	f000 f932 	bl	8002c20 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80029bc:	e014      	b.n	80029e8 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00f      	beq.n	80029e6 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3310      	adds	r3, #16
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fa3a 	bl	8001e44 <xTaskRemoveFromEventList>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 80029d6:	f7ff faff 	bl	8001fd8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	1e5a      	subs	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
 80029e4:	e000      	b.n	80029e8 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 80029e6:	e003      	b.n	80029f0 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	dce6      	bgt.n	80029be <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f04f 32ff 	mov.w	r2, #4294967295
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80029f8:	f000 f924 	bl	8002c44 <vPortExitCritical>
}
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop

08002a04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002a0c:	f000 f908 	bl	8002c20 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf14      	ite	ne
 8002a18:	2300      	movne	r3, #0
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8002a20:	f000 f910 	bl	8002c44 <vPortExitCritical>

	return xReturn;
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop

08002a30 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002a38:	f000 f8f2 	bl	8002c20 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a44:	429a      	cmp	r2, r3
 8002a46:	bf14      	ite	ne
 8002a48:	2300      	movne	r3, #0
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8002a50:	f000 f8f8 	bl	8002c44 <vPortExitCritical>

	return xReturn;
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop

08002a60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002a6a:	f000 f8d9 	bl	8002c20 <vPortEnterCritical>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a76:	d102      	bne.n	8002a7e <vQueueWaitForMessageRestricted+0x1e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d102      	bne.n	8002a8e <vQueueWaitForMessageRestricted+0x2e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	649a      	str	r2, [r3, #72]	; 0x48
 8002a8e:	f000 f8d9 	bl	8002c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3324      	adds	r3, #36	; 0x24
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	f7ff f9a5 	bl	8001df0 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ff60 	bl	800296c <prvUnlockQueue>
	}
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop

08002ab4 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f023 0307 	bic.w	r3, r3, #7
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8002ad4:	f7fe ffb6 	bl	8001a44 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <pvPortMalloc+0x70>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ae4:	d212      	bcs.n	8002b0c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <pvPortMalloc+0x70>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	441a      	add	r2, r3
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <pvPortMalloc+0x70>)
 8002af0:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d90a      	bls.n	8002b0c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <pvPortMalloc+0x70>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <pvPortMalloc+0x74>)
 8002afc:	4413      	add	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <pvPortMalloc+0x70>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	441a      	add	r2, r3
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <pvPortMalloc+0x70>)
 8002b0a:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
 8002b0c:	f7fe ffa8 	bl	8001a60 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <pvPortMalloc+0x66>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8002b16:	f7fd fc81 	bl	800041c <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	200015a0 	.word	0x200015a0
 8002b28:	200001a0 	.word	0x200001a0

08002b2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop

08002b40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3b04      	subs	r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3b04      	subs	r3, #4
 8002b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3b14      	subs	r3, #20
 8002b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3b24      	subs	r3, #36	; 0x24
 8002b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f06f 0202 	mvn.w	r2, #2
 8002b8a:	601a      	str	r2, [r3, #0]
	return pxTopOfStack;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <pxCurrentTCBConst2>)
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	6808      	ldr	r0, [r1, #0]
 8002ba2:	f850 eb04 	ldr.w	lr, [r0], #4
 8002ba6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002baa:	f380 8809 	msr	PSP, r0
 8002bae:	f04f 0000 	mov.w	r0, #0
 8002bb2:	f380 8811 	msr	BASEPRI, r0
 8002bb6:	4770      	bx	lr

08002bb8 <pxCurrentTCBConst2>:
 8002bb8:	200000a0 	.word	0x200000a0

08002bbc <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 8002bbc:	4803      	ldr	r0, [pc, #12]	; (8002bcc <vPortStartFirstTask+0x10>)
 8002bbe:	6800      	ldr	r0, [r0, #0]
 8002bc0:	6800      	ldr	r0, [r0, #0]
 8002bc2:	f380 8808 	msr	MSP, r0
 8002bc6:	b662      	cpsie	i
 8002bc8:	df00      	svc	0
 8002bca:	bf00      	nop
 8002bcc:	e000ed08 	.word	0xe000ed08

08002bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <xPortStartScheduler+0x30>)
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <xPortStartScheduler+0x30>)
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002bde:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <xPortStartScheduler+0x30>)
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <xPortStartScheduler+0x30>)
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002bea:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002bec:	f000 f884 	bl	8002cf8 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <xPortStartScheduler+0x34>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002bf6:	f7ff ffe1 	bl	8002bbc <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	e000ed20 	.word	0xe000ed20
 8002c04:	20000008 	.word	0x20000008

08002c08 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <vPortYieldFromISR+0x14>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
}
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002c24:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c28:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <vPortEnterCritical+0x20>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <vPortEnterCritical+0x20>)
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000008 	.word	0x20000008

08002c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <vPortExitCritical+0x28>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1e5a      	subs	r2, r3, #1
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <vPortExitCritical+0x28>)
 8002c50:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <vPortExitCritical+0x28>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <vPortExitCritical+0x1e>
	{
		portENABLE_INTERRUPTS();
 8002c5a:	f04f 0000 	mov.w	r0, #0
 8002c5e:	f380 8811 	msr	BASEPRI, r0
	}
}
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000008 	.word	0x20000008

08002c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002c70:	f3ef 8009 	mrs	r0, PSP
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <pxCurrentTCBConst>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c7c:	f01e 0f10 	tst.w	lr, #16
 8002c80:	bf08      	it	eq
 8002c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c86:	f840 ed04 	str.w	lr, [r0, #-4]!
 8002c8a:	6010      	str	r0, [r2, #0]
 8002c8c:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c94:	f380 8811 	msr	BASEPRI, r0
 8002c98:	f7ff f820 	bl	8001cdc <vTaskSwitchContext>
 8002c9c:	f04f 0000 	mov.w	r0, #0
 8002ca0:	f380 8811 	msr	BASEPRI, r0
 8002ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	6808      	ldr	r0, [r1, #0]
 8002cac:	f850 eb04 	ldr.w	lr, [r0], #4
 8002cb0:	f01e 0f10 	tst.w	lr, #16
 8002cb4:	bf08      	it	eq
 8002cb6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002cba:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002cbe:	f380 8809 	msr	PSP, r0
 8002cc2:	4770      	bx	lr

08002cc4 <pxCurrentTCBConst>:
 8002cc4:	200000a0 	.word	0x200000a0

08002cc8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
    unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <SysTick_Handler+0x2c>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002cde:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 8002ce2:	f7fe ff53 	bl	8001b8c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8002ce6:	f04f 0000 	mov.w	r0, #0
 8002cea:	f380 8811 	msr	BASEPRI, r0
}
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cfc:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <prvSetupTimerInterrupt+0x24>)
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <prvSetupTimerInterrupt+0x28>)
 8002d00:	6811      	ldr	r1, [r2, #0]
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <prvSetupTimerInterrupt+0x2c>)
 8002d04:	fba2 0201 	umull	r0, r2, r2, r1
 8002d08:	0992      	lsrs	r2, r2, #6
 8002d0a:	3a01      	subs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <prvSetupTimerInterrupt+0x30>)
 8002d10:	2207      	movs	r2, #7
 8002d12:	601a      	str	r2, [r3, #0]
}
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000e014 	.word	0xe000e014
 8002d20:	20000000 	.word	0x20000000
 8002d24:	10624dd3 	.word	0x10624dd3
 8002d28:	e000e010 	.word	0xe000e010

08002d2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f103 0208 	add.w	r2, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f103 0208 	add.w	r2, r3, #8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f103 0208 	add.w	r2, r3, #8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
}
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop

08002d6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
}
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	601a      	str	r2, [r3, #0]
}
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d103      	bne.n	8002df4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e00c      	b.n	8002e0e <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3308      	adds	r3, #8
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	e002      	b.n	8002e02 <vListInsert+0x2e>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d9f6      	bls.n	8002dfc <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
}
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6852      	ldr	r2, [r2, #4]
 8002e5e:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d103      	bne.n	8002e78 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1e5a      	subs	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop

08002e94 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	801a      	strh	r2, [r3, #0]
}
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <RCC_AHB1PeriphClockCmd+0x38>)
 8002ec8:	4a08      	ldr	r2, [pc, #32]	; (8002eec <RCC_AHB1PeriphClockCmd+0x38>)
 8002eca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed2:	e006      	b.n	8002ee2 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <RCC_AHB1PeriphClockCmd+0x38>)
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <RCC_AHB1PeriphClockCmd+0x38>)
 8002ed8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	43d2      	mvns	r2, r2
 8002ede:	400a      	ands	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40023800 	.word	0x40023800

08002ef0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d006      	beq.n	8002f10 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <RCC_APB2PeriphClockCmd+0x38>)
 8002f04:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <RCC_APB2PeriphClockCmd+0x38>)
 8002f06:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
 8002f0e:	e006      	b.n	8002f1e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <RCC_APB2PeriphClockCmd+0x38>)
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <RCC_APB2PeriphClockCmd+0x38>)
 8002f14:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	43d2      	mvns	r2, r2
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40023800 	.word	0x40023800

08002f2c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	e076      	b.n	8003036 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d165      	bne.n	8003030 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2103      	movs	r1, #3
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	401a      	ands	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	791b      	ldrb	r3, [r3, #4]
 8002f82:	4619      	mov	r1, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	791b      	ldrb	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d003      	beq.n	8002fa2 <GPIO_Init+0x76>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	791b      	ldrb	r3, [r3, #4]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d12e      	bne.n	8003000 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2103      	movs	r1, #3
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	795b      	ldrb	r3, [r3, #5]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	799b      	ldrb	r3, [r3, #6]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	b29b      	uxth	r3, r3
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2103      	movs	r1, #3
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	401a      	ands	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	79db      	ldrb	r3, [r3, #7]
 8003020:	4619      	mov	r1, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3301      	adds	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b0f      	cmp	r3, #15
 800303a:	d985      	bls.n	8002f48 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8003054:	2300      	movs	r3, #0
 8003056:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e001      	b.n	800306e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8003086:	79fa      	ldrb	r2, [r7, #7]
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <STM_EVAL_LEDInit+0x50>)
 800308a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308e:	4618      	mov	r0, r3
 8003090:	2101      	movs	r1, #1
 8003092:	f7ff ff0f 	bl	8002eb4 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8003096:	79fa      	ldrb	r2, [r7, #7]
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <STM_EVAL_LEDInit+0x54>)
 800309a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800309e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80030a0:	2301      	movs	r3, #1
 80030a2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80030ac:	2302      	movs	r3, #2
 80030ae:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80030b0:	79fa      	ldrb	r2, [r7, #7]
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <STM_EVAL_LEDInit+0x58>)
 80030b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030b8:	f107 0308 	add.w	r3, r7, #8
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f7ff ff34 	bl	8002f2c <GPIO_Init>
}
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	080032ec 	.word	0x080032ec
 80030d0:	080032e4 	.word	0x080032e4
 80030d4:	2000000c 	.word	0x2000000c

080030d8 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 80030e2:	79fa      	ldrb	r2, [r7, #7]
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <STM_EVAL_LEDOff+0x28>)
 80030e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ea:	79f9      	ldrb	r1, [r7, #7]
 80030ec:	4a05      	ldr	r2, [pc, #20]	; (8003104 <STM_EVAL_LEDOff+0x2c>)
 80030ee:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80030f2:	835a      	strh	r2, [r3, #26]
}
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	2000000c 	.word	0x2000000c
 8003104:	080032e4 	.word	0x080032e4

08003108 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8003112:	79fa      	ldrb	r2, [r7, #7]
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <STM_EVAL_LEDToggle+0x34>)
 8003116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311a:	79f9      	ldrb	r1, [r7, #7]
 800311c:	4a07      	ldr	r2, [pc, #28]	; (800313c <STM_EVAL_LEDToggle+0x34>)
 800311e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003122:	6951      	ldr	r1, [r2, #20]
 8003124:	79f8      	ldrb	r0, [r7, #7]
 8003126:	4a06      	ldr	r2, [pc, #24]	; (8003140 <STM_EVAL_LEDToggle+0x38>)
 8003128:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800312c:	404a      	eors	r2, r1
 800312e:	615a      	str	r2, [r3, #20]
}
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000000c 	.word	0x2000000c
 8003140:	080032e4 	.word	0x080032e4

08003144 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	2300      	movs	r3, #0
 8003152:	73bb      	strb	r3, [r7, #14]
 8003154:	230f      	movs	r3, #15
 8003156:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	78db      	ldrb	r3, [r3, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d037      	beq.n	80031d0 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003160:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <NVIC_Init+0xb4>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	43db      	mvns	r3, r3
 8003166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	f1c3 0304 	rsb	r3, r3, #4
 8003174:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8003176:	7b7a      	ldrb	r2, [r7, #13]
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	fa42 f303 	asr.w	r3, r2, r3
 800317e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	461a      	mov	r2, r3
 8003186:	7bbb      	ldrb	r3, [r7, #14]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	789a      	ldrb	r2, [r3, #2]
 8003192:	7b7b      	ldrb	r3, [r7, #13]
 8003194:	4013      	ands	r3, r2
 8003196:	b2da      	uxtb	r2, r3
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	4313      	orrs	r3, r2
 800319c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80031a4:	4a15      	ldr	r2, [pc, #84]	; (80031fc <NVIC_Init+0xb8>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <NVIC_Init+0xb8>)
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	7812      	ldrb	r2, [r2, #0]
 80031b8:	0952      	lsrs	r2, r2, #5
 80031ba:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	7809      	ldrb	r1, [r1, #0]
 80031c0:	f001 011f 	and.w	r1, r1, #31
 80031c4:	2001      	movs	r0, #1
 80031c6:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80031ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80031ce:	e00e      	b.n	80031ee <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <NVIC_Init+0xb8>)
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	0952      	lsrs	r2, r2, #5
 80031d8:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	7809      	ldrb	r1, [r1, #0]
 80031de:	f001 011f 	and.w	r1, r1, #31
 80031e2:	2001      	movs	r0, #1
 80031e4:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80031e8:	3220      	adds	r2, #32
 80031ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00
 80031fc:	e000e100 	.word	0xe000e100

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <__libc_init_array+0x3c>)
 8003204:	4d0e      	ldr	r5, [pc, #56]	; (8003240 <__libc_init_array+0x40>)
 8003206:	1aed      	subs	r5, r5, r3
 8003208:	10ad      	asrs	r5, r5, #2
 800320a:	2400      	movs	r4, #0
 800320c:	461e      	mov	r6, r3
 800320e:	42ac      	cmp	r4, r5
 8003210:	d004      	beq.n	800321c <__libc_init_array+0x1c>
 8003212:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003216:	4790      	blx	r2
 8003218:	3401      	adds	r4, #1
 800321a:	e7f8      	b.n	800320e <__libc_init_array+0xe>
 800321c:	f000 f86e 	bl	80032fc <_init>
 8003220:	4d08      	ldr	r5, [pc, #32]	; (8003244 <__libc_init_array+0x44>)
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <__libc_init_array+0x48>)
 8003224:	1aed      	subs	r5, r5, r3
 8003226:	10ad      	asrs	r5, r5, #2
 8003228:	2400      	movs	r4, #0
 800322a:	461e      	mov	r6, r3
 800322c:	42ac      	cmp	r4, r5
 800322e:	d004      	beq.n	800323a <__libc_init_array+0x3a>
 8003230:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003234:	4790      	blx	r2
 8003236:	3401      	adds	r4, #1
 8003238:	e7f8      	b.n	800322c <__libc_init_array+0x2c>
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	08003314 	.word	0x08003314
 8003240:	08003314 	.word	0x08003314
 8003244:	08003318 	.word	0x08003318
 8003248:	08003314 	.word	0x08003314

0800324c <memcpy>:
 800324c:	b510      	push	{r4, lr}
 800324e:	2300      	movs	r3, #0
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <memcpy+0x10>
 8003254:	5ccc      	ldrb	r4, [r1, r3]
 8003256:	54c4      	strb	r4, [r0, r3]
 8003258:	3301      	adds	r3, #1
 800325a:	e7f9      	b.n	8003250 <memcpy+0x4>
 800325c:	bd10      	pop	{r4, pc}

0800325e <memset>:
 800325e:	4402      	add	r2, r0
 8003260:	4603      	mov	r3, r0
 8003262:	4293      	cmp	r3, r2
 8003264:	d002      	beq.n	800326c <memset+0xe>
 8003266:	f803 1b01 	strb.w	r1, [r3], #1
 800326a:	e7fa      	b.n	8003262 <memset+0x4>
 800326c:	4770      	bx	lr

0800326e <strncpy>:
 800326e:	b510      	push	{r4, lr}
 8003270:	4603      	mov	r3, r0
 8003272:	b132      	cbz	r2, 8003282 <strncpy+0x14>
 8003274:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003278:	f803 4b01 	strb.w	r4, [r3], #1
 800327c:	3a01      	subs	r2, #1
 800327e:	2c00      	cmp	r4, #0
 8003280:	d1f7      	bne.n	8003272 <strncpy+0x4>
 8003282:	441a      	add	r2, r3
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <strncpy+0x22>
 8003288:	2100      	movs	r1, #0
 800328a:	f803 1b01 	strb.w	r1, [r3], #1
 800328e:	e7f9      	b.n	8003284 <strncpy+0x16>
 8003290:	bd10      	pop	{r4, pc}
 8003292:	0000      	movs	r0, r0
 8003294:	63656843 	.word	0x63656843
 8003298:	6e49206b 	.word	0x6e49206b
 800329c:	20727473 	.word	0x20727473
 80032a0:	656c6553 	.word	0x656c6553
 80032a4:	50207463 	.word	0x50207463
 80032a8:	00736e69 	.word	0x00736e69
 80032ac:	706d6f43 	.word	0x706d6f43
 80032b0:	7265736f 	.word	0x7265736f
 80032b4:	73615420 	.word	0x73615420
 80032b8:	0000006b 	.word	0x0000006b
 80032bc:	20726d54 	.word	0x20726d54
 80032c0:	00637653 	.word	0x00637653
 80032c4:	454c4449 	.word	0x454c4449
 80032c8:	00000000 	.word	0x00000000
 80032cc:	00000a0d 	.word	0x00000a0d
 80032d0:	09097325 	.word	0x09097325
 80032d4:	25096325 	.word	0x25096325
 80032d8:	75250975 	.word	0x75250975
 80032dc:	0d752509 	.word	0x0d752509
 80032e0:	0000000a 	.word	0x0000000a

080032e4 <GPIO_PIN>:
 80032e4:	20001000 80004000                       ... .@..

080032ec <GPIO_CLK>:
 80032ec:	00000008 00000008 00000008 00000008     ................

080032fc <_init>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	bf00      	nop
 8003300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003302:	bc08      	pop	{r3}
 8003304:	469e      	mov	lr, r3
 8003306:	4770      	bx	lr

08003308 <_fini>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr
